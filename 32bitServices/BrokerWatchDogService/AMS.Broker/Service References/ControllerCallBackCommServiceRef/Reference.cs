//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.WatchDogService.ControllerCallBackCommServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControllerCallBackCommServiceRef.IControllerCallBackCommService")]
    public interface IControllerCallBackCommService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RefreshStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RefreshStationResponse")]
        void RefreshStation(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RefreshStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RefreshStationResponse")]
        System.Threading.Tasks.Task RefreshStationAsync(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/DeactivatedStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/DeactivatedStationResponse")]
        void DeactivatedStation(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/DeactivatedStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/DeactivatedStationResponse")]
        System.Threading.Tasks.Task DeactivatedStationAsync(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/ActivatedStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/ActivatedStationResponse")]
        void ActivatedStation(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/ActivatedStation", ReplyAction="http://tempuri.org/IControllerCallBackCommService/ActivatedStationResponse")]
        System.Threading.Tasks.Task ActivatedStationAsync(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/DeviceStartRequest", ReplyAction="http://tempuri.org/IControllerCallBackCommService/DeviceStartRequestResponse")]
        void DeviceStartRequest(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/DeviceStartRequest", ReplyAction="http://tempuri.org/IControllerCallBackCommService/DeviceStartRequestResponse")]
        System.Threading.Tasks.Task DeviceStartRequestAsync(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/UserLoggedIn", ReplyAction="http://tempuri.org/IControllerCallBackCommService/UserLoggedInResponse")]
        void UserLoggedIn(string userContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/UserLoggedIn", ReplyAction="http://tempuri.org/IControllerCallBackCommService/UserLoggedInResponse")]
        System.Threading.Tasks.Task UserLoggedInAsync(string userContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/UserLoggedOut", ReplyAction="http://tempuri.org/IControllerCallBackCommService/UserLoggedOutResponse")]
        void UserLoggedOut(string userContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/UserLoggedOut", ReplyAction="http://tempuri.org/IControllerCallBackCommService/UserLoggedOutResponse")]
        System.Threading.Tasks.Task UserLoggedOutAsync(string userContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertResponse")]
        void RaiseAlert(string alertContent, string OldOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertResponse")]
        System.Threading.Tasks.Task RaiseAlertAsync(string alertContent, string OldOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAssigned", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAssignedResponse")]
        void RaiseAlertAssigned(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAssigned", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAssignedResponse")]
        System.Threading.Tasks.Task RaiseAlertAssignedAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCollabrate", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCollabrateResponse")]
        void RaiseAlertCollabrate(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCollabrate", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCollabrateResponse")]
        System.Threading.Tasks.Task RaiseAlertCollabrateAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCapProfileUpdate", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCapProfileUpdateResponse")]
        void RaiseCapProfileUpdate(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCapProfileUpdate", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCapProfileUpdateResponse")]
        System.Threading.Tasks.Task RaiseCapProfileUpdateAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/HaveUpdatedAlerts", ReplyAction="http://tempuri.org/IControllerCallBackCommService/HaveUpdatedAlertsResponse")]
        void HaveUpdatedAlerts(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/HaveUpdatedAlerts", ReplyAction="http://tempuri.org/IControllerCallBackCommService/HaveUpdatedAlertsResponse")]
        System.Threading.Tasks.Task HaveUpdatedAlertsAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/IncidentReportRaised", ReplyAction="http://tempuri.org/IControllerCallBackCommService/IncidentReportRaisedResponse")]
        void IncidentReportRaised(string incidentReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/IncidentReportRaised", ReplyAction="http://tempuri.org/IControllerCallBackCommService/IncidentReportRaisedResponse")]
        System.Threading.Tasks.Task IncidentReportRaisedAsync(string incidentReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/SendOpenAlerts", ReplyAction="http://tempuri.org/IControllerCallBackCommService/SendOpenAlertsResponse")]
        void SendOpenAlerts(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/SendOpenAlerts", ReplyAction="http://tempuri.org/IControllerCallBackCommService/SendOpenAlertsResponse")]
        System.Threading.Tasks.Task SendOpenAlertsAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/InformAboutEvent", ReplyAction="http://tempuri.org/IControllerCallBackCommService/InformAboutEventResponse")]
        void InformAboutEvent(string realTimeEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/InformAboutEvent", ReplyAction="http://tempuri.org/IControllerCallBackCommService/InformAboutEventResponse")]
        System.Threading.Tasks.Task InformAboutEventAsync(string realTimeEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteAdded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteAddedResponse")]
        void RaiseSiteAdded(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteAdded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteAddedResponse")]
        System.Threading.Tasks.Task RaiseSiteAddedAsync(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteChanged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteChangedResponse")]
        void RaiseSiteChanged(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteChanged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteChangedResponse")]
        System.Threading.Tasks.Task RaiseSiteChangedAsync(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteDeleted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteDeletedResponse")]
        void RaiseSiteDeleted(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseSiteDeleted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseSiteDeletedResponse")]
        System.Threading.Tasks.Task RaiseSiteDeletedAsync(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceAdded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceAddedResponse")]
        void RaiseDeviceAdded(string device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceAdded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceAddedResponse")]
        System.Threading.Tasks.Task RaiseDeviceAddedAsync(string device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceChanged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceChangedResponse")]
        void RaiseDeviceChanged(string device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceChanged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceChangedResponse")]
        System.Threading.Tasks.Task RaiseDeviceChangedAsync(string device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceDeleted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceDeletedResponse")]
        void RaiseDeviceDeleted(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceDeleted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseDeviceDeletedResponse")]
        System.Threading.Tasks.Task RaiseDeviceDeletedAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStarted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStartedRespo" +
            "nse")]
        void RaiseVideoAnalyticsStarted(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStarted", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStartedRespo" +
            "nse")]
        System.Threading.Tasks.Task RaiseVideoAnalyticsStartedAsync(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCamBookMarkadded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCamBookMarkaddedResponse")]
        void RaiseCamBookMarkadded(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCamBookMarkadded", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCamBookMarkaddedResponse")]
        System.Threading.Tasks.Task RaiseCamBookMarkaddedAsync(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStopped", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStoppedRespo" +
            "nse")]
        void RaiseVideoAnalyticsStopped(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStopped", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseVideoAnalyticsStoppedRespo" +
            "nse")]
        System.Threading.Tasks.Task RaiseVideoAnalyticsStoppedAsync(string cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAcknowledged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAcknowledgedResponse")]
        void RaiseAlertAcknowledged(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAcknowledged", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertAcknowledgedResponse")]
        System.Threading.Tasks.Task RaiseAlertAcknowledgedAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCanceled", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCanceledResponse")]
        void RaiseAlertCanceled(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCanceled", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAlertCanceledResponse")]
        System.Threading.Tasks.Task RaiseAlertCanceledAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAccountSaved", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAccountSavedResponse")]
        void RaiseAccountSaved(string accountDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseAccountSaved", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseAccountSavedResponse")]
        System.Threading.Tasks.Task RaiseAccountSavedAsync(string accountDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/CheckStatus", ReplyAction="http://tempuri.org/IControllerCallBackCommService/CheckStatusResponse")]
        int CheckStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/CheckStatus", ReplyAction="http://tempuri.org/IControllerCallBackCommService/CheckStatusResponse")]
        System.Threading.Tasks.Task<int> CheckStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RefreshAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RefreshAlertResponse")]
        void RefreshAlert(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RefreshAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RefreshAlertResponse")]
        System.Threading.Tasks.Task RefreshAlertAsync(string stationContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCloseAllAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCloseAllAlertResponse")]
        void RaiseCloseAllAlert(string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerCallBackCommService/RaiseCloseAllAlert", ReplyAction="http://tempuri.org/IControllerCallBackCommService/RaiseCloseAllAlertResponse")]
        System.Threading.Tasks.Task RaiseCloseAllAlertAsync(string DeviceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerCallBackCommServiceChannel : AMS.Broker.WatchDogService.ControllerCallBackCommServiceRef.IControllerCallBackCommService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerCallBackCommServiceClient : System.ServiceModel.ClientBase<AMS.Broker.WatchDogService.ControllerCallBackCommServiceRef.IControllerCallBackCommService>, AMS.Broker.WatchDogService.ControllerCallBackCommServiceRef.IControllerCallBackCommService {
        
        public ControllerCallBackCommServiceClient() {
        }
        
        public ControllerCallBackCommServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerCallBackCommServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerCallBackCommServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerCallBackCommServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RefreshStation(string stationContent) {
            base.Channel.RefreshStation(stationContent);
        }
        
        public System.Threading.Tasks.Task RefreshStationAsync(string stationContent) {
            return base.Channel.RefreshStationAsync(stationContent);
        }
        
        public void DeactivatedStation(int stationId) {
            base.Channel.DeactivatedStation(stationId);
        }
        
        public System.Threading.Tasks.Task DeactivatedStationAsync(int stationId) {
            return base.Channel.DeactivatedStationAsync(stationId);
        }
        
        public void ActivatedStation(string stationContent) {
            base.Channel.ActivatedStation(stationContent);
        }
        
        public System.Threading.Tasks.Task ActivatedStationAsync(string stationContent) {
            return base.Channel.ActivatedStationAsync(stationContent);
        }
        
        public void DeviceStartRequest(int winId, string content) {
            base.Channel.DeviceStartRequest(winId, content);
        }
        
        public System.Threading.Tasks.Task DeviceStartRequestAsync(int winId, string content) {
            return base.Channel.DeviceStartRequestAsync(winId, content);
        }
        
        public void UserLoggedIn(string userContent) {
            base.Channel.UserLoggedIn(userContent);
        }
        
        public System.Threading.Tasks.Task UserLoggedInAsync(string userContent) {
            return base.Channel.UserLoggedInAsync(userContent);
        }
        
        public void UserLoggedOut(string userContent) {
            base.Channel.UserLoggedOut(userContent);
        }
        
        public System.Threading.Tasks.Task UserLoggedOutAsync(string userContent) {
            return base.Channel.UserLoggedOutAsync(userContent);
        }
        
        public void RaiseAlert(string alertContent, string OldOwner) {
            base.Channel.RaiseAlert(alertContent, OldOwner);
        }
        
        public System.Threading.Tasks.Task RaiseAlertAsync(string alertContent, string OldOwner) {
            return base.Channel.RaiseAlertAsync(alertContent, OldOwner);
        }
        
        public void RaiseAlertAssigned(string alert) {
            base.Channel.RaiseAlertAssigned(alert);
        }
        
        public System.Threading.Tasks.Task RaiseAlertAssignedAsync(string alert) {
            return base.Channel.RaiseAlertAssignedAsync(alert);
        }
        
        public void RaiseAlertCollabrate(string alert) {
            base.Channel.RaiseAlertCollabrate(alert);
        }
        
        public System.Threading.Tasks.Task RaiseAlertCollabrateAsync(string alert) {
            return base.Channel.RaiseAlertCollabrateAsync(alert);
        }
        
        public void RaiseCapProfileUpdate(string alert) {
            base.Channel.RaiseCapProfileUpdate(alert);
        }
        
        public System.Threading.Tasks.Task RaiseCapProfileUpdateAsync(string alert) {
            return base.Channel.RaiseCapProfileUpdateAsync(alert);
        }
        
        public void HaveUpdatedAlerts(string alerts) {
            base.Channel.HaveUpdatedAlerts(alerts);
        }
        
        public System.Threading.Tasks.Task HaveUpdatedAlertsAsync(string alerts) {
            return base.Channel.HaveUpdatedAlertsAsync(alerts);
        }
        
        public void IncidentReportRaised(string incidentReport) {
            base.Channel.IncidentReportRaised(incidentReport);
        }
        
        public System.Threading.Tasks.Task IncidentReportRaisedAsync(string incidentReport) {
            return base.Channel.IncidentReportRaisedAsync(incidentReport);
        }
        
        public void SendOpenAlerts(string alerts) {
            base.Channel.SendOpenAlerts(alerts);
        }
        
        public System.Threading.Tasks.Task SendOpenAlertsAsync(string alerts) {
            return base.Channel.SendOpenAlertsAsync(alerts);
        }
        
        public void InformAboutEvent(string realTimeEvent) {
            base.Channel.InformAboutEvent(realTimeEvent);
        }
        
        public System.Threading.Tasks.Task InformAboutEventAsync(string realTimeEvent) {
            return base.Channel.InformAboutEventAsync(realTimeEvent);
        }
        
        public void RaiseSiteAdded(string site) {
            base.Channel.RaiseSiteAdded(site);
        }
        
        public System.Threading.Tasks.Task RaiseSiteAddedAsync(string site) {
            return base.Channel.RaiseSiteAddedAsync(site);
        }
        
        public void RaiseSiteChanged(string site) {
            base.Channel.RaiseSiteChanged(site);
        }
        
        public System.Threading.Tasks.Task RaiseSiteChangedAsync(string site) {
            return base.Channel.RaiseSiteChangedAsync(site);
        }
        
        public void RaiseSiteDeleted(int siteId) {
            base.Channel.RaiseSiteDeleted(siteId);
        }
        
        public System.Threading.Tasks.Task RaiseSiteDeletedAsync(int siteId) {
            return base.Channel.RaiseSiteDeletedAsync(siteId);
        }
        
        public void RaiseDeviceAdded(string device) {
            base.Channel.RaiseDeviceAdded(device);
        }
        
        public System.Threading.Tasks.Task RaiseDeviceAddedAsync(string device) {
            return base.Channel.RaiseDeviceAddedAsync(device);
        }
        
        public void RaiseDeviceChanged(string device) {
            base.Channel.RaiseDeviceChanged(device);
        }
        
        public System.Threading.Tasks.Task RaiseDeviceChangedAsync(string device) {
            return base.Channel.RaiseDeviceChangedAsync(device);
        }
        
        public void RaiseDeviceDeleted(int deviceId) {
            base.Channel.RaiseDeviceDeleted(deviceId);
        }
        
        public System.Threading.Tasks.Task RaiseDeviceDeletedAsync(int deviceId) {
            return base.Channel.RaiseDeviceDeletedAsync(deviceId);
        }
        
        public void RaiseVideoAnalyticsStarted(string cameraGuid) {
            base.Channel.RaiseVideoAnalyticsStarted(cameraGuid);
        }
        
        public System.Threading.Tasks.Task RaiseVideoAnalyticsStartedAsync(string cameraGuid) {
            return base.Channel.RaiseVideoAnalyticsStartedAsync(cameraGuid);
        }
        
        public void RaiseCamBookMarkadded(string cameraGuid) {
            base.Channel.RaiseCamBookMarkadded(cameraGuid);
        }
        
        public System.Threading.Tasks.Task RaiseCamBookMarkaddedAsync(string cameraGuid) {
            return base.Channel.RaiseCamBookMarkaddedAsync(cameraGuid);
        }
        
        public void RaiseVideoAnalyticsStopped(string cameraGuid) {
            base.Channel.RaiseVideoAnalyticsStopped(cameraGuid);
        }
        
        public System.Threading.Tasks.Task RaiseVideoAnalyticsStoppedAsync(string cameraGuid) {
            return base.Channel.RaiseVideoAnalyticsStoppedAsync(cameraGuid);
        }
        
        public void RaiseAlertAcknowledged(string alert) {
            base.Channel.RaiseAlertAcknowledged(alert);
        }
        
        public System.Threading.Tasks.Task RaiseAlertAcknowledgedAsync(string alert) {
            return base.Channel.RaiseAlertAcknowledgedAsync(alert);
        }
        
        public void RaiseAlertCanceled(string alert) {
            base.Channel.RaiseAlertCanceled(alert);
        }
        
        public System.Threading.Tasks.Task RaiseAlertCanceledAsync(string alert) {
            return base.Channel.RaiseAlertCanceledAsync(alert);
        }
        
        public void RaiseAccountSaved(string accountDto) {
            base.Channel.RaiseAccountSaved(accountDto);
        }
        
        public System.Threading.Tasks.Task RaiseAccountSavedAsync(string accountDto) {
            return base.Channel.RaiseAccountSavedAsync(accountDto);
        }
        
        public int CheckStatus() {
            return base.Channel.CheckStatus();
        }
        
        public System.Threading.Tasks.Task<int> CheckStatusAsync() {
            return base.Channel.CheckStatusAsync();
        }
        
        public void RefreshAlert(string stationContent) {
            base.Channel.RefreshAlert(stationContent);
        }
        
        public System.Threading.Tasks.Task RefreshAlertAsync(string stationContent) {
            return base.Channel.RefreshAlertAsync(stationContent);
        }
        
        public void RaiseCloseAllAlert(string DeviceId) {
            base.Channel.RaiseCloseAllAlert(DeviceId);
        }
        
        public System.Threading.Tasks.Task RaiseCloseAllAlertAsync(string DeviceId) {
            return base.Channel.RaiseCloseAllAlertAsync(DeviceId);
        }
    }
}
