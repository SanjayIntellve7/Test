//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.AutherizationService.IncidentReportGetOperationServiceWebRef
{
    using System.Runtime.Serialization;
    using System;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IncidentReportGetOperationServiceWebRef.IIncidentReportGetOperationServiceWeb")]
    public interface IIncidentReportGetOperationServiceWeb
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportsByOwne" +
            "rWeb", ReplyAction = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportsByOwne" +
            "rWebResponse")]
        AMS.Broker.Contracts.DTO.IncidentReport[] GetIncidentReportsByOwnerWeb(string userName, string authToken, string startCreateDate, string endCreateDate, string ownerUserName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportsByOwne" +
            "rWeb", ReplyAction = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportsByOwne" +
            "rWebResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetIncidentReportsByOwnerWebAsync(string userName, string authToken, string startCreateDate, string endCreateDate, string ownerUserName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportByIDWeb" +
            "", ReplyAction = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportByIDWeb" +
            "Response")]
        AMS.Broker.Contracts.DTO.IncidentReport[] GetIncidentReportByIDWeb(string authToken, int IncidentReportId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportByIDWeb" +
            "", ReplyAction = "http://tempuri.org/IIncidentReportGetOperationServiceWeb/GetIncidentReportByIDWeb" +
            "Response")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetIncidentReportByIDWebAsync(string authToken, int IncidentReportId);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIncidentReportGetOperationServiceWebChannel : AMS.Broker.AutherizationService.IncidentReportGetOperationServiceWebRef.IIncidentReportGetOperationServiceWeb, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IncidentReportGetOperationServiceWebClient : System.ServiceModel.ClientBase<AMS.Broker.AutherizationService.IncidentReportGetOperationServiceWebRef.IIncidentReportGetOperationServiceWeb>, AMS.Broker.AutherizationService.IncidentReportGetOperationServiceWebRef.IIncidentReportGetOperationServiceWeb
    {

        public IncidentReportGetOperationServiceWebClient()
        {
        }

        public IncidentReportGetOperationServiceWebClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public IncidentReportGetOperationServiceWebClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public IncidentReportGetOperationServiceWebClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public IncidentReportGetOperationServiceWebClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public AMS.Broker.Contracts.DTO.IncidentReport[] GetIncidentReportsByOwnerWeb(string userName, string authToken, string startCreateDate, string endCreateDate, string ownerUserName)
        {
            return base.Channel.GetIncidentReportsByOwnerWeb(userName, authToken, startCreateDate, endCreateDate, ownerUserName);
        }

        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetIncidentReportsByOwnerWebAsync(string userName, string authToken, string startCreateDate, string endCreateDate, string ownerUserName)
        {
            return base.Channel.GetIncidentReportsByOwnerWebAsync(userName, authToken, startCreateDate, endCreateDate, ownerUserName);
        }

        public AMS.Broker.Contracts.DTO.IncidentReport[] GetIncidentReportByIDWeb(string authToken, int IncidentReportId)
        {
            return base.Channel.GetIncidentReportByIDWeb(authToken, IncidentReportId);
        }

        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetIncidentReportByIDWebAsync(string authToken, int IncidentReportId)
        {
            return base.Channel.GetIncidentReportByIDWebAsync(authToken, IncidentReportId);
        }
    }
}
