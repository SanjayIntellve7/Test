//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.AutherizationService.AlertsSetOperationServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AlertsSetOperationServiceRef.IAlertsSetOperationService")]
    public interface IAlertsSetOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateAlertInformations", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateAlertInformationsResponse")]
        bool UpdateAlertInformations(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateAlertInformations", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateAlertInformationsResponse")]
        System.Threading.Tasks.Task<bool> UpdateAlertInformationsAsync(string alert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateAlertsCollection", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateAlertsCollectionResponse")]
        bool UpdateAlertsCollection(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateAlertsCollection", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateAlertsCollectionResponse")]
        System.Threading.Tasks.Task<bool> UpdateAlertsCollectionAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CreateMobileAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertResponse")]
        bool CreateMobileAlert(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CreateMobileAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertResponse")]
        System.Threading.Tasks.Task<bool> CreateMobileAlertAsync(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertNormal", ReplyAction = "http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertNormalResponse")]
        bool CreateMobileAlertNormal(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertNormal", ReplyAction = "http://tempuri.org/IAlertsSetOperationService/CreateMobileAlertNormalResponse")]
        System.Threading.Tasks.Task<bool> CreateMobileAlertNormalAsync(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No);
        
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CreateDummySimulatorAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CreateDummySimulatorAlertsResponse")]
        bool CreateDummySimulatorAlerts(string alertcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CreateDummySimulatorAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CreateDummySimulatorAlertsResponse")]
        System.Threading.Tasks.Task<bool> CreateDummySimulatorAlertsAsync(string alertcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateMobileAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateMobileAlertResponse")]
        bool UpdateMobileAlert(string alertId, string retPath, string retVoicenotePath, string retVideoPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/UpdateMobileAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/UpdateMobileAlertResponse")]
        System.Threading.Tasks.Task<bool> UpdateMobileAlertAsync(string alertId, string retPath, string retVoicenotePath, string retVideoPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/fileUpload", ReplyAction="http://tempuri.org/IAlertsSetOperationService/fileUploadResponse")]
        string fileUpload(System.IO.Stream fileStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/fileUpload", ReplyAction="http://tempuri.org/IAlertsSetOperationService/fileUploadResponse")]
        System.Threading.Tasks.Task<string> fileUploadAsync(System.IO.Stream fileStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/SetAlertOwner", ReplyAction="http://tempuri.org/IAlertsSetOperationService/SetAlertOwnerResponse")]
        long SetAlertOwner(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/SetAlertOwner", ReplyAction="http://tempuri.org/IAlertsSetOperationService/SetAlertOwnerResponse")]
        System.Threading.Tasks.Task<long> SetAlertOwnerAsync(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AlertCollabration", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AlertCollabrationResponse")]
        bool AlertCollabration(string newOwner, long alertID, string oldeOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AlertCollabration", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AlertCollabrationResponse")]
        System.Threading.Tasks.Task<bool> AlertCollabrationAsync(string newOwner, long alertID, string oldeOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsResponse")]
        bool AcknowledgeAlerts(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeAlertsAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsMobile", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsMobileResponse")]
        bool AcknowledgeAlertsMobile(string authToken, string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsMobile", ReplyAction="http://tempuri.org/IAlertsSetOperationService/AcknowledgeAlertsMobileResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeAlertsMobileAsync(string authToken, string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelAlertsResponse")]
        bool CancelAlerts(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelAlerts", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelAlertsResponse")]
        System.Threading.Tasks.Task<bool> CancelAlertsAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelallAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelallAlertResponse")]
        bool CancelallAlert(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelallAlert", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelallAlertResponse")]
        System.Threading.Tasks.Task<bool> CancelallAlertAsync(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelAlertsMobile", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelAlertsMobileResponse")]
        bool CancelAlertsMobile(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CancelAlertsMobile", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CancelAlertsMobileResponse")]
        System.Threading.Tasks.Task<bool> CancelAlertsMobileAsync(string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CapProfileUpdate", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CapProfileUpdateResponse")]
        bool CapProfileUpdate(string authToken, string alerts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsSetOperationService/CapProfileUpdate", ReplyAction="http://tempuri.org/IAlertsSetOperationService/CapProfileUpdateResponse")]
        System.Threading.Tasks.Task<bool> CapProfileUpdateAsync(string authToken, string alerts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlertsSetOperationServiceChannel : AMS.Broker.AutherizationService.AlertsSetOperationServiceRef.IAlertsSetOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlertsSetOperationServiceClient : System.ServiceModel.ClientBase<AMS.Broker.AutherizationService.AlertsSetOperationServiceRef.IAlertsSetOperationService>, AMS.Broker.AutherizationService.AlertsSetOperationServiceRef.IAlertsSetOperationService {
        
        public AlertsSetOperationServiceClient() {
        }
        
        public AlertsSetOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AlertsSetOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertsSetOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertsSetOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UpdateAlertInformations(string alert) {
            return base.Channel.UpdateAlertInformations(alert);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAlertInformationsAsync(string alert) {
            return base.Channel.UpdateAlertInformationsAsync(alert);
        }
        
        public bool UpdateAlertsCollection(string alerts) {
            return base.Channel.UpdateAlertsCollection(alerts);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAlertsCollectionAsync(string alerts) {
            return base.Channel.UpdateAlertsCollectionAsync(alerts);
        }
        
        public bool CreateMobileAlert(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No) {
            return base.Channel.CreateMobileAlert(urgency, severity, note, lattitude, longitude, retPath, retVoicenotePath, retVideoPath, Imei_No);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMobileAlertAsync(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No) {
            return base.Channel.CreateMobileAlertAsync(urgency, severity, note, lattitude, longitude, retPath, retVoicenotePath, retVideoPath, Imei_No);
        }

        public bool CreateMobileAlertNormal(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No)
        {
            return base.Channel.CreateMobileAlertNormal(urgency, severity, note, lattitude, longitude, retPath, retVoicenotePath, retVideoPath, Imei_No);
        }

        public System.Threading.Tasks.Task<bool> CreateMobileAlertNormalAsync(string urgency, string severity, string note, string lattitude, string longitude, string retPath, string retVoicenotePath, string retVideoPath, string Imei_No)
        {
            return base.Channel.CreateMobileAlertNormalAsync(urgency, severity, note, lattitude, longitude, retPath, retVoicenotePath, retVideoPath, Imei_No);
        }

        
        
        public bool CreateDummySimulatorAlerts(string alertcode) {
            return base.Channel.CreateDummySimulatorAlerts(alertcode);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDummySimulatorAlertsAsync(string alertcode) {
            return base.Channel.CreateDummySimulatorAlertsAsync(alertcode);
        }
        
        public bool UpdateMobileAlert(string alertId, string retPath, string retVoicenotePath, string retVideoPath) {
            return base.Channel.UpdateMobileAlert(alertId, retPath, retVoicenotePath, retVideoPath);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMobileAlertAsync(string alertId, string retPath, string retVoicenotePath, string retVideoPath) {
            return base.Channel.UpdateMobileAlertAsync(alertId, retPath, retVoicenotePath, retVideoPath);
        }
        
        public string fileUpload(System.IO.Stream fileStream) {
            return base.Channel.fileUpload(fileStream);
        }
        
        public System.Threading.Tasks.Task<string> fileUploadAsync(System.IO.Stream fileStream) {
            return base.Channel.fileUploadAsync(fileStream);
        }
        
        public long SetAlertOwner(string authToken, int alertID) {
            return base.Channel.SetAlertOwner(authToken, alertID);
        }
        
        public System.Threading.Tasks.Task<long> SetAlertOwnerAsync(string authToken, int alertID) {
            return base.Channel.SetAlertOwnerAsync(authToken, alertID);
        }
        
        public bool AlertCollabration(string newOwner, long alertID, string oldeOwner) {
            return base.Channel.AlertCollabration(newOwner, alertID, oldeOwner);
        }
        
        public System.Threading.Tasks.Task<bool> AlertCollabrationAsync(string newOwner, long alertID, string oldeOwner) {
            return base.Channel.AlertCollabrationAsync(newOwner, alertID, oldeOwner);
        }
        
        public bool AcknowledgeAlerts(string alerts) {
            return base.Channel.AcknowledgeAlerts(alerts);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeAlertsAsync(string alerts) {
            return base.Channel.AcknowledgeAlertsAsync(alerts);
        }
        
        public bool AcknowledgeAlertsMobile(string authToken, string alerts) {
            return base.Channel.AcknowledgeAlertsMobile(authToken, alerts);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeAlertsMobileAsync(string authToken, string alerts) {
            return base.Channel.AcknowledgeAlertsMobileAsync(authToken, alerts);
        }
        
        public bool CancelAlerts(string alerts) {
            return base.Channel.CancelAlerts(alerts);
        }
        
        public System.Threading.Tasks.Task<bool> CancelAlertsAsync(string alerts) {
            return base.Channel.CancelAlertsAsync(alerts);
        }
        
        public bool CancelallAlert(string authToken, int alertID) {
            return base.Channel.CancelallAlert(authToken, alertID);
        }
        
        public System.Threading.Tasks.Task<bool> CancelallAlertAsync(string authToken, int alertID) {
            return base.Channel.CancelallAlertAsync(authToken, alertID);
        }
        
        public bool CancelAlertsMobile(string alerts) {
            return base.Channel.CancelAlertsMobile(alerts);
        }
        
        public System.Threading.Tasks.Task<bool> CancelAlertsMobileAsync(string alerts) {
            return base.Channel.CancelAlertsMobileAsync(alerts);
        }
        
        public bool CapProfileUpdate(string authToken, string alerts) {
            return base.Channel.CapProfileUpdate(authToken, alerts);
        }
        
        public System.Threading.Tasks.Task<bool> CapProfileUpdateAsync(string authToken, string alerts) {
            return base.Channel.CapProfileUpdateAsync(authToken, alerts);
        }
    }
}
