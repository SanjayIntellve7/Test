//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.AutherizationService.MosaicCommunicationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MosaicCommunicationServiceReference.IMosaicCommunicationService")]
    public interface IMosaicCommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/DeviceStartRequest", ReplyAction="http://tempuri.org/IMosaicCommunicationService/DeviceStartRequestResponse")]
        void DeviceStartRequest(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/DeviceStartRequest", ReplyAction="http://tempuri.org/IMosaicCommunicationService/DeviceStartRequestResponse")]
        System.Threading.Tasks.Task DeviceStartRequestAsync(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/CheckStatus", ReplyAction="http://tempuri.org/IMosaicCommunicationService/CheckStatusResponse")]
        int CheckStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/CheckStatus", ReplyAction="http://tempuri.org/IMosaicCommunicationService/CheckStatusResponse")]
        System.Threading.Tasks.Task<int> CheckStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/SetMosaic", ReplyAction="http://tempuri.org/IMosaicCommunicationService/SetMosaicResponse")]
        void SetMosaic(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/SetMosaic", ReplyAction="http://tempuri.org/IMosaicCommunicationService/SetMosaicResponse")]
        System.Threading.Tasks.Task SetMosaicAsync(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/StartStopSequence", ReplyAction="http://tempuri.org/IMosaicCommunicationService/StartStopSequenceResponse")]
        void StartStopSequence(int winId, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMosaicCommunicationService/StartStopSequence", ReplyAction="http://tempuri.org/IMosaicCommunicationService/StartStopSequenceResponse")]
        System.Threading.Tasks.Task StartStopSequenceAsync(int winId, string content);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMosaicCommunicationServiceChannel : AMS.Broker.AutherizationService.MosaicCommunicationServiceReference.IMosaicCommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MosaicCommunicationServiceClient : System.ServiceModel.ClientBase<AMS.Broker.AutherizationService.MosaicCommunicationServiceReference.IMosaicCommunicationService>, AMS.Broker.AutherizationService.MosaicCommunicationServiceReference.IMosaicCommunicationService {
        
        public MosaicCommunicationServiceClient() {
        }
        
        public MosaicCommunicationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MosaicCommunicationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MosaicCommunicationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MosaicCommunicationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeviceStartRequest(int winId, string content) {
            base.Channel.DeviceStartRequest(winId, content);
        }
        
        public System.Threading.Tasks.Task DeviceStartRequestAsync(int winId, string content) {
            return base.Channel.DeviceStartRequestAsync(winId, content);
        }
        
        public int CheckStatus() {
            return base.Channel.CheckStatus();
        }
        
        public System.Threading.Tasks.Task<int> CheckStatusAsync() {
            return base.Channel.CheckStatusAsync();
        }
        
        public void SetMosaic(int winId, string content) {
            base.Channel.SetMosaic(winId, content);
        }
        
        public System.Threading.Tasks.Task SetMosaicAsync(int winId, string content) {
            return base.Channel.SetMosaicAsync(winId, content);
        }
        
        public void StartStopSequence(int winId, string content) {
            base.Channel.StartStopSequence(winId, content);
        }
        
        public System.Threading.Tasks.Task StartStopSequenceAsync(int winId, string content) {
            return base.Channel.StartStopSequenceAsync(winId, content);
        }
    }
}
