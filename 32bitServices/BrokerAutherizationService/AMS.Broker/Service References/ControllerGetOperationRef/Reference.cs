//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.AutherizationService.ControllerGetOperationRef {
    using System.Runtime.Serialization;
    using System;    
        
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControllerGetOperationRef.IControllerGetOperationService")]
    public interface IControllerGetOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionResponse")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMob", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobResponse" +
            "")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionMob(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMob", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobResponse" +
            "")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionMobAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionWeb", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionWebResponse" +
            "")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionWeb(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionWeb", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionWebResponse" +
            "")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionWebAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobSiteId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobSiteIdRe" +
            "sponse")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionMobSiteId(string authToken, long siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobSiteId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesCollectionMobSiteIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionMobSiteIdAsync(string authToken, long siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAccountsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAccountsCollectionResponse")]
        AMS.Broker.Contracts.DTO.AccountDto[] GetAccountsCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAccountsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAccountsCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AccountDto[]> GetAccountsCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContactsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContactsCollectionResponse")]
        AMS.Broker.Contracts.DTO.ContactDto[] GetContactsCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContactsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContactsCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ContactDto[]> GetContactsCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDisasterDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDisasterDataCollectionRespon" +
            "se")]
        AMS.Broker.Contracts.DTO.tblDisasterManagementDTO[] GetDisasterDataCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDisasterDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDisasterDataCollectionRespon" +
            "se")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblDisasterManagementDTO[]> GetDisasterDataCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetElectriLightDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetElectriLightDataCollectionRe" +
            "sponse")]
        AMS.Broker.Contracts.DTO.tblSmartCityStreetLightDTO[] GetElectriLightDataCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetElectriLightDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetElectriLightDataCollectionRe" +
            "sponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblSmartCityStreetLightDTO[]> GetElectriLightDataCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetElectritionDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetElectritionDataCollectionRes" +
            "ponse")]
        AMS.Broker.Contracts.DTO.tblSmartCityStreetElecDTO[] GetElectritionDataCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetElectritionDataCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetElectritionDataCollectionRes" +
            "ponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblSmartCityStreetElecDTO[]> GetElectritionDataCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAttachResourceCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAttachResourceCollectionResp" +
            "onse")]
        AMS.Broker.Contracts.DTO.ResourceData[] GetAttachResourceCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAttachResourceCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAttachResourceCollectionResp" +
            "onse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ResourceData[]> GetAttachResourceCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/Test", ReplyAction="http://tempuri.org/IControllerGetOperationService/TestResponse")]
        bool Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/Test", ReplyAction="http://tempuri.org/IControllerGetOperationService/TestResponse")]
        System.Threading.Tasks.Task<bool> TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetGroupsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetGroupsCollectionResponse")]
        AMS.Broker.Contracts.DTO.Group[] GetGroupsCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetGroupsCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetGroupsCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Group[]> GetGroupsCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdResponse")]
        AMS.Broker.Contracts.DTO.DeviceDto GetDeviceById(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetDeviceByIdAsync(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAssociatedDeviceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAssociatedDeviceIdResponse")]
        int GetAssociatedDeviceId(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAssociatedDeviceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAssociatedDeviceIdResponse")]
        System.Threading.Tasks.Task<int> GetAssociatedDeviceIdAsync(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdSim", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdSimResponse")]
        AMS.Broker.Contracts.DTO.DeviceDto GetDeviceByIdSim(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdSim", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceByIdSimResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetDeviceByIdSimAsync(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCameraDeviceByGuid", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCameraDeviceByGuidResponse")]
        AMS.Broker.Contracts.DTO.DeviceDto GetCameraDeviceByGuid(System.Guid cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCameraDeviceByGuid", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCameraDeviceByGuidResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetCameraDeviceByGuidAsync(System.Guid cameraGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetSiteAddress", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetSiteAddressResponse")]
        AMS.Broker.Contracts.DTO.AddressDto[] GetSiteAddress(string siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetSiteAddress", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetSiteAddressResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AddressDto[]> GetSiteAddressAsync(string siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesByInterfaceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesByInterfaceIdResponse" +
            "")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesByInterfaceId(int interfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesByInterfaceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesByInterfaceIdResponse" +
            "")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesByInterfaceIdAsync(int interfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetUsers", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetUsersResponse")]
        AMS.Broker.Contracts.DTO.UserDto[] GetUsers(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetUsers", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetUsersResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.UserDto[]> GetUsersAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceTypes", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceTypesResponse")]
        string[] GetDeviceTypes(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceTypes", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetDeviceTypesAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrs", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrsResponse")]
        AMS.Broker.Contracts.DTO.NvrDto[] GetNvrs(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrs", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto[]> GetNvrsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrByIdResponse")]
        AMS.Broker.Contracts.DTO.NvrDto GetNvrById(string authToken, long nvrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrByIdResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto> GetNvrByIdAsync(string authToken, long nvrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrByInterfaceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrByInterfaceIdResponse")]
        AMS.Broker.Contracts.DTO.NvrDto GetNvrByInterfaceId(string authToken, long interfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNvrByInterfaceId", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNvrByInterfaceIdResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto> GetNvrByInterfaceIdAsync(string authToken, long interfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetGroupById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetGroupByIdResponse")]
        AMS.Broker.Contracts.DTO.Group GetGroupById(string authToken, long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetGroupById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetGroupByIdResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Group> GetGroupByIdAsync(string authToken, long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetValuesLookUp", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetValuesLookUpResponse")]
        AMS.Broker.Contracts.DTO.ValuesLookUp[] GetValuesLookUp(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetValuesLookUp", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetValuesLookUpResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ValuesLookUp[]> GetValuesLookUpAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetValuesHistory", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetValuesHistoryResponse")]
        string[] GetValuesHistory(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetValuesHistory", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetValuesHistoryResponse")]
        System.Threading.Tasks.Task<string[]> GetValuesHistoryAsync(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesScheduleCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesScheduleCollectionRes" +
            "ponse")]
        AMS.Broker.Contracts.DTO.DeviceVAnalyticsScheduleDTO[] GetDevicesScheduleCollection(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDevicesScheduleCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDevicesScheduleCollectionRes" +
            "ponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceVAnalyticsScheduleDTO[]> GetDevicesScheduleCollectionAsync(string authToken, long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNewEvents", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNewEventsResponse")]
        AMS.Broker.Contracts.DTO.Event[] GetNewEvents(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNewEvents", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNewEventsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Event[]> GetNewEventsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceIdByName", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceIdByNameResponse")]
        long GetDeviceIdByName(string authToken, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceIdByName", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceIdByNameResponse")]
        System.Threading.Tasks.Task<long> GetDeviceIdByNameAsync(string authToken, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNokPresetCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNokPresetCollectionResponse")]
        AMS.Broker.Contracts.DTO.tblNokDTO[] GetNokPresetCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNokPresetCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNokPresetCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblNokDTO[]> GetNokPresetCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNokPresetFromNok", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNokPresetFromNokResponse")]
        long GetNokPresetFromNok(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetNokPresetFromNok", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetNokPresetFromNokResponse")]
        System.Threading.Tasks.Task<long> GetNokPresetFromNokAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetSelectedDateIncidentReportsB" +
            "yOwner", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetSelectedDateIncidentReportsB" +
            "yOwnerResponse")]
        AMS.Broker.Contracts.DTO.IncidentReportWrapper[] GetSelectedDateIncidentReportsByOwner(string authToken, string startCreateDate, string endCreateDate, string ownerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetSelectedDateIncidentReportsB" +
            "yOwner", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetSelectedDateIncidentReportsB" +
            "yOwnerResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReportWrapper[]> GetSelectedDateIncidentReportsByOwnerAsync(string authToken, string startCreateDate, string endCreateDate, string ownerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/IsAlertAttached", ReplyAction="http://tempuri.org/IControllerGetOperationService/IsAlertAttachedResponse")]
        bool IsAlertAttached(long IrID, long alertid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/IsAlertAttached", ReplyAction="http://tempuri.org/IControllerGetOperationService/IsAlertAttachedResponse")]
        System.Threading.Tasks.Task<bool> IsAlertAttachedAsync(long IrID, long alertid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceStatus", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceStatusResponse")]
        AMS.Broker.Contracts.DTO.tblCameraStatusDto[] GetDeviceStatus(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceStatus", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceStatusResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblCameraStatusDto[]> GetDeviceStatusAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetUsersite", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetUsersiteResponse")]
        long GetUsersite(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetUsersite", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetUsersiteResponse")]
        System.Threading.Tasks.Task<long> GetUsersiteAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceAnalyticsDetails", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceAnalyticsDetailsRespon" +
            "se")]
        AMS.Broker.Contracts.DTO.AnalyticsDetailsDto[] GetDeviceAnalyticsDetails(string authToken, int siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetDeviceAnalyticsDetails", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetDeviceAnalyticsDetailsRespon" +
            "se")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AnalyticsDetailsDto[]> GetDeviceAnalyticsDetailsAsync(string authToken, int siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAnalyticsDeviceCount", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAnalyticsDeviceCountResponse" +
            "")]
        long GetAnalyticsDeviceCount(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAnalyticsDeviceCount", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAnalyticsDeviceCountResponse" +
            "")]
        System.Threading.Tasks.Task<long> GetAnalyticsDeviceCountAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextIRData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextIRDataResponse")]
        AMS.Broker.Contracts.DTO.IncidentReport[] GetContextIRData(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextIRData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextIRDataResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetContextIRDataAsync(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextSiteData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextSiteDataResponse")]
        AMS.Broker.Contracts.DTO.SiteDto[] GetContextSiteData(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextSiteData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextSiteDataResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SiteDto[]> GetContextSiteDataAsync(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextDeviceData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextDeviceDataResponse")]
        AMS.Broker.Contracts.DTO.DeviceDto[] GetContextDeviceData(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetContextDeviceData", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetContextDeviceDataResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetContextDeviceDataAsync(string Context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCameraBookMarkCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCameraBookMarkCollectionResp" +
            "onse")]
        AMS.Broker.Contracts.DTO.tblCameraBookMarkDto[] GetCameraBookMarkCollection(long deviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCameraBookMarkCollection", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCameraBookMarkCollectionResp" +
            "onse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblCameraBookMarkDto[]> GetCameraBookMarkCollectionAsync(long deviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetRepositoryConfiguration", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetRepositoryConfigurationRespo" +
            "nse")]
        string GetRepositoryConfiguration(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetRepositoryConfiguration", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetRepositoryConfigurationRespo" +
            "nse")]
        System.Threading.Tasks.Task<string> GetRepositoryConfigurationAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAlarmPanelInterface", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAlarmPanelInterfaceResponse")]
        AMS.Broker.Contracts.DTO.AlarmPanelDTO[] GetAlarmPanelInterface(System.Guid authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetAlarmPanelInterface", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetAlarmPanelInterfaceResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlarmPanelDTO[]> GetAlarmPanelInterfaceAsync(System.Guid authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetInterfaceById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetInterfaceByIdResponse")]
        string GetInterfaceById(string authToken, long InterfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetInterfaceById", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetInterfaceByIdResponse")]
        System.Threading.Tasks.Task<string> GetInterfaceByIdAsync(string authToken, long InterfaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetPAInterface", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetPAInterfaceResponse")]
        AMS.Broker.Contracts.DTO.AlarmPanelDTO[] GetPAInterface();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetPAInterface", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetPAInterfaceResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlarmPanelDTO[]> GetPAInterfaceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCustomerinfo", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCustomerinfoResponse")]
        AMS.Broker.Contracts.DTO.tblcustomermasterDTO[] GetCustomerinfo(string strcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerGetOperationService/GetCustomerinfo", ReplyAction="http://tempuri.org/IControllerGetOperationService/GetCustomerinfoResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblcustomermasterDTO[]> GetCustomerinfoAsync(string strcid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerGetOperationServiceChannel : AMS.Broker.AutherizationService.ControllerGetOperationRef.IControllerGetOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerGetOperationServiceClient : System.ServiceModel.ClientBase<AMS.Broker.AutherizationService.ControllerGetOperationRef.IControllerGetOperationService>, AMS.Broker.AutherizationService.ControllerGetOperationRef.IControllerGetOperationService {
        
        public ControllerGetOperationServiceClient() {
        }
        
        public ControllerGetOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerGetOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerGetOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerGetOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollection(string authToken) {
            return base.Channel.GetDevicesCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionAsync(string authToken) {
            return base.Channel.GetDevicesCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionMob(string authToken) {
            return base.Channel.GetDevicesCollectionMob(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionMobAsync(string authToken) {
            return base.Channel.GetDevicesCollectionMobAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionWeb(string authToken) {
            return base.Channel.GetDevicesCollectionWeb(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionWebAsync(string authToken) {
            return base.Channel.GetDevicesCollectionWebAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesCollectionMobSiteId(string authToken, long siteId) {
            return base.Channel.GetDevicesCollectionMobSiteId(authToken, siteId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesCollectionMobSiteIdAsync(string authToken, long siteId) {
            return base.Channel.GetDevicesCollectionMobSiteIdAsync(authToken, siteId);
        }
        
        public AMS.Broker.Contracts.DTO.AccountDto[] GetAccountsCollection(string authToken) {
            return base.Channel.GetAccountsCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AccountDto[]> GetAccountsCollectionAsync(string authToken) {
            return base.Channel.GetAccountsCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.ContactDto[] GetContactsCollection(string authToken) {
            return base.Channel.GetContactsCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ContactDto[]> GetContactsCollectionAsync(string authToken) {
            return base.Channel.GetContactsCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.tblDisasterManagementDTO[] GetDisasterDataCollection(string authToken) {
            return base.Channel.GetDisasterDataCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblDisasterManagementDTO[]> GetDisasterDataCollectionAsync(string authToken) {
            return base.Channel.GetDisasterDataCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.tblSmartCityStreetLightDTO[] GetElectriLightDataCollection(string authToken) {
            return base.Channel.GetElectriLightDataCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblSmartCityStreetLightDTO[]> GetElectriLightDataCollectionAsync(string authToken) {
            return base.Channel.GetElectriLightDataCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.tblSmartCityStreetElecDTO[] GetElectritionDataCollection(string authToken) {
            return base.Channel.GetElectritionDataCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblSmartCityStreetElecDTO[]> GetElectritionDataCollectionAsync(string authToken) {
            return base.Channel.GetElectritionDataCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.ResourceData[] GetAttachResourceCollection() {
            return base.Channel.GetAttachResourceCollection();
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ResourceData[]> GetAttachResourceCollectionAsync() {
            return base.Channel.GetAttachResourceCollectionAsync();
        }
        
        public bool Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<bool> TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public AMS.Broker.Contracts.DTO.Group[] GetGroupsCollection(string authToken) {
            return base.Channel.GetGroupsCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Group[]> GetGroupsCollectionAsync(string authToken) {
            return base.Channel.GetGroupsCollectionAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto GetDeviceById(string authToken, long deviceId) {
            return base.Channel.GetDeviceById(authToken, deviceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetDeviceByIdAsync(string authToken, long deviceId) {
            return base.Channel.GetDeviceByIdAsync(authToken, deviceId);
        }
        
        public int GetAssociatedDeviceId(long deviceId) {
            return base.Channel.GetAssociatedDeviceId(deviceId);
        }
        
        public System.Threading.Tasks.Task<int> GetAssociatedDeviceIdAsync(long deviceId) {
            return base.Channel.GetAssociatedDeviceIdAsync(deviceId);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto GetDeviceByIdSim(long deviceId) {
            return base.Channel.GetDeviceByIdSim(deviceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetDeviceByIdSimAsync(long deviceId) {
            return base.Channel.GetDeviceByIdSimAsync(deviceId);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto GetCameraDeviceByGuid(System.Guid cameraGuid) {
            return base.Channel.GetCameraDeviceByGuid(cameraGuid);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto> GetCameraDeviceByGuidAsync(System.Guid cameraGuid) {
            return base.Channel.GetCameraDeviceByGuidAsync(cameraGuid);
        }
        
        public AMS.Broker.Contracts.DTO.AddressDto[] GetSiteAddress(string siteID) {
            return base.Channel.GetSiteAddress(siteID);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AddressDto[]> GetSiteAddressAsync(string siteID) {
            return base.Channel.GetSiteAddressAsync(siteID);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetDevicesByInterfaceId(int interfaceId) {
            return base.Channel.GetDevicesByInterfaceId(interfaceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetDevicesByInterfaceIdAsync(int interfaceId) {
            return base.Channel.GetDevicesByInterfaceIdAsync(interfaceId);
        }
        
        public AMS.Broker.Contracts.DTO.UserDto[] GetUsers(string authToken) {
            return base.Channel.GetUsers(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.UserDto[]> GetUsersAsync(string authToken) {
            return base.Channel.GetUsersAsync(authToken);
        }
        
        public string[] GetDeviceTypes(string authToken) {
            return base.Channel.GetDeviceTypes(authToken);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDeviceTypesAsync(string authToken) {
            return base.Channel.GetDeviceTypesAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.NvrDto[] GetNvrs(string authToken) {
            return base.Channel.GetNvrs(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto[]> GetNvrsAsync(string authToken) {
            return base.Channel.GetNvrsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.NvrDto GetNvrById(string authToken, long nvrId) {
            return base.Channel.GetNvrById(authToken, nvrId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto> GetNvrByIdAsync(string authToken, long nvrId) {
            return base.Channel.GetNvrByIdAsync(authToken, nvrId);
        }
        
        public AMS.Broker.Contracts.DTO.NvrDto GetNvrByInterfaceId(string authToken, long interfaceId) {
            return base.Channel.GetNvrByInterfaceId(authToken, interfaceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.NvrDto> GetNvrByInterfaceIdAsync(string authToken, long interfaceId) {
            return base.Channel.GetNvrByInterfaceIdAsync(authToken, interfaceId);
        }
        
        public AMS.Broker.Contracts.DTO.Group GetGroupById(string authToken, long groupId) {
            return base.Channel.GetGroupById(authToken, groupId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Group> GetGroupByIdAsync(string authToken, long groupId) {
            return base.Channel.GetGroupByIdAsync(authToken, groupId);
        }
        
        public AMS.Broker.Contracts.DTO.ValuesLookUp[] GetValuesLookUp(string authToken) {
            return base.Channel.GetValuesLookUp(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ValuesLookUp[]> GetValuesLookUpAsync(string authToken) {
            return base.Channel.GetValuesLookUpAsync(authToken);
        }
        
        public string[] GetValuesHistory(string authToken, long deviceId) {
            return base.Channel.GetValuesHistory(authToken, deviceId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetValuesHistoryAsync(string authToken, long deviceId) {
            return base.Channel.GetValuesHistoryAsync(authToken, deviceId);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceVAnalyticsScheduleDTO[] GetDevicesScheduleCollection(string authToken, long deviceId) {
            return base.Channel.GetDevicesScheduleCollection(authToken, deviceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceVAnalyticsScheduleDTO[]> GetDevicesScheduleCollectionAsync(string authToken, long deviceId) {
            return base.Channel.GetDevicesScheduleCollectionAsync(authToken, deviceId);
        }
        
        public AMS.Broker.Contracts.DTO.Event[] GetNewEvents(string authToken) {
            return base.Channel.GetNewEvents(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Event[]> GetNewEventsAsync(string authToken) {
            return base.Channel.GetNewEventsAsync(authToken);
        }
        
        public long GetDeviceIdByName(string authToken, string name) {
            return base.Channel.GetDeviceIdByName(authToken, name);
        }
        
        public System.Threading.Tasks.Task<long> GetDeviceIdByNameAsync(string authToken, string name) {
            return base.Channel.GetDeviceIdByNameAsync(authToken, name);
        }
        
        public AMS.Broker.Contracts.DTO.tblNokDTO[] GetNokPresetCollection(string authToken) {
            return base.Channel.GetNokPresetCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblNokDTO[]> GetNokPresetCollectionAsync(string authToken) {
            return base.Channel.GetNokPresetCollectionAsync(authToken);
        }
        
        public long GetNokPresetFromNok(string authToken) {
            return base.Channel.GetNokPresetFromNok(authToken);
        }
        
        public System.Threading.Tasks.Task<long> GetNokPresetFromNokAsync(string authToken) {
            return base.Channel.GetNokPresetFromNokAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.IncidentReportWrapper[] GetSelectedDateIncidentReportsByOwner(string authToken, string startCreateDate, string endCreateDate, string ownerUsername) {
            return base.Channel.GetSelectedDateIncidentReportsByOwner(authToken, startCreateDate, endCreateDate, ownerUsername);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReportWrapper[]> GetSelectedDateIncidentReportsByOwnerAsync(string authToken, string startCreateDate, string endCreateDate, string ownerUsername) {
            return base.Channel.GetSelectedDateIncidentReportsByOwnerAsync(authToken, startCreateDate, endCreateDate, ownerUsername);
        }
        
        public bool IsAlertAttached(long IrID, long alertid) {
            return base.Channel.IsAlertAttached(IrID, alertid);
        }
        
        public System.Threading.Tasks.Task<bool> IsAlertAttachedAsync(long IrID, long alertid) {
            return base.Channel.IsAlertAttachedAsync(IrID, alertid);
        }
        
        public AMS.Broker.Contracts.DTO.tblCameraStatusDto[] GetDeviceStatus(string authToken) {
            return base.Channel.GetDeviceStatus(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblCameraStatusDto[]> GetDeviceStatusAsync(string authToken) {
            return base.Channel.GetDeviceStatusAsync(authToken);
        }
        
        public long GetUsersite(string userName) {
            return base.Channel.GetUsersite(userName);
        }
        
        public System.Threading.Tasks.Task<long> GetUsersiteAsync(string userName) {
            return base.Channel.GetUsersiteAsync(userName);
        }
        
        public AMS.Broker.Contracts.DTO.AnalyticsDetailsDto[] GetDeviceAnalyticsDetails(string authToken, int siteID) {
            return base.Channel.GetDeviceAnalyticsDetails(authToken, siteID);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AnalyticsDetailsDto[]> GetDeviceAnalyticsDetailsAsync(string authToken, int siteID) {
            return base.Channel.GetDeviceAnalyticsDetailsAsync(authToken, siteID);
        }
        
        public long GetAnalyticsDeviceCount(string authToken) {
            return base.Channel.GetAnalyticsDeviceCount(authToken);
        }
        
        public System.Threading.Tasks.Task<long> GetAnalyticsDeviceCountAsync(string authToken) {
            return base.Channel.GetAnalyticsDeviceCountAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.IncidentReport[] GetContextIRData(string Context) {
            return base.Channel.GetContextIRData(Context);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.IncidentReport[]> GetContextIRDataAsync(string Context) {
            return base.Channel.GetContextIRDataAsync(Context);
        }
        
        public AMS.Broker.Contracts.DTO.SiteDto[] GetContextSiteData(string Context) {
            return base.Channel.GetContextSiteData(Context);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SiteDto[]> GetContextSiteDataAsync(string Context) {
            return base.Channel.GetContextSiteDataAsync(Context);
        }
        
        public AMS.Broker.Contracts.DTO.DeviceDto[] GetContextDeviceData(string Context) {
            return base.Channel.GetContextDeviceData(Context);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.DeviceDto[]> GetContextDeviceDataAsync(string Context) {
            return base.Channel.GetContextDeviceDataAsync(Context);
        }
        
        public AMS.Broker.Contracts.DTO.tblCameraBookMarkDto[] GetCameraBookMarkCollection(long deviceID) {
            return base.Channel.GetCameraBookMarkCollection(deviceID);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblCameraBookMarkDto[]> GetCameraBookMarkCollectionAsync(long deviceID) {
            return base.Channel.GetCameraBookMarkCollectionAsync(deviceID);
        }
        
        public string GetRepositoryConfiguration(string authToken) {
            return base.Channel.GetRepositoryConfiguration(authToken);
        }
        
        public System.Threading.Tasks.Task<string> GetRepositoryConfigurationAsync(string authToken) {
            return base.Channel.GetRepositoryConfigurationAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.AlarmPanelDTO[] GetAlarmPanelInterface(System.Guid authToken) {
            return base.Channel.GetAlarmPanelInterface(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlarmPanelDTO[]> GetAlarmPanelInterfaceAsync(System.Guid authToken) {
            return base.Channel.GetAlarmPanelInterfaceAsync(authToken);
        }
        
        public string GetInterfaceById(string authToken, long InterfaceId) {
            return base.Channel.GetInterfaceById(authToken, InterfaceId);
        }
        
        public System.Threading.Tasks.Task<string> GetInterfaceByIdAsync(string authToken, long InterfaceId) {
            return base.Channel.GetInterfaceByIdAsync(authToken, InterfaceId);
        }
        
        public AMS.Broker.Contracts.DTO.AlarmPanelDTO[] GetPAInterface() {
            return base.Channel.GetPAInterface();
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlarmPanelDTO[]> GetPAInterfaceAsync() {
            return base.Channel.GetPAInterfaceAsync();
        }
        
        public AMS.Broker.Contracts.DTO.tblcustomermasterDTO[] GetCustomerinfo(string strcid) {
            return base.Channel.GetCustomerinfo(strcid);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.tblcustomermasterDTO[]> GetCustomerinfoAsync(string strcid) {
            return base.Channel.GetCustomerinfoAsync(strcid);
        }
    }
}
