//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.AutherizationService.AlertsGetOperationServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AlertsGetOperationServiceRef.IAlertsGetOperationService")]
    public interface IAlertsGetOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetCurrentOpenAlertsResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetCurrentOpenAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetCurrentOpenAlertsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetCurrentOpenAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsCountRespons" +
            "e")]
        string GetMobCurrentOpenAlertsCount(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsCountRespons" +
            "e")]
        System.Threading.Tasks.Task<string> GetMobCurrentOpenAlertsCountAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsResponse")]
        AMS.Broker.Contracts.DTO.AlertMobDto[] GetMobCurrentOpenAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobCurrentOpenAlertsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertMobDto[]> GetMobCurrentOpenAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAcknoledgeAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAcknoledgeAlertsResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetAcknoledgeAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAcknoledgeAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAcknoledgeAlertsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetAcknoledgeAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetClosedAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetClosedAlertsResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetClosedAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetClosedAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetClosedAlertsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetClosedAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/StartGetCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/StartGetCurrentOpenAlertsResponse")]
        bool StartGetCurrentOpenAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/StartGetCurrentOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/StartGetCurrentOpenAlertsResponse")]
        System.Threading.Tasks.Task<bool> StartGetCurrentOpenAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsKpi", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsKpiResponse")]
        AMS.Broker.Contracts.DTO.AlertKpi[] GetAlertsKpi(System.Guid authToken, string startTime, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsKpi", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsKpiResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertKpi[]> GetAlertsKpiAsync(System.Guid authToken, string startTime, string endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetNewOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetNewOpenAlertsResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetNewOpenAlerts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetNewOpenAlerts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetNewOpenAlertsResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetNewOpenAlertsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetTop50Alert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetTop50Alert(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetTop50Alert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetTop50AlertAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertDummy", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertDummyResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetTop50AlertDummy(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertDummy", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetTop50AlertDummyResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetTop50AlertDummyAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsSeverity", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsSeverityResponse")]
        AMS.Broker.Contracts.DTO.SeverityDto[] GetAlertsSeverity(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsSeverity", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsSeverityResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SeverityDto[]> GetAlertsSeverityAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsCertinity", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsCertinityResponse")]
        AMS.Broker.Contracts.DTO.CertaintyDto[] GetAlertsCertinity(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsCertinity", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsCertinityResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.CertaintyDto[]> GetAlertsCertinityAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsUrgency", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsUrgencyResponse")]
        AMS.Broker.Contracts.DTO.UrgencyDto[] GetAlertsUrgency(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertsUrgency", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertsUrgencyResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.UrgencyDto[]> GetAlertsUrgencyAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetSingleAlert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetSingleAlertResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetSingleAlert(int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetSingleAlert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetSingleAlertResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetSingleAlertAsync(int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetOpenAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetOpenAlertCountResponse")]
        long GetOpenAlertCount(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetOpenAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetOpenAlertCountResponse")]
        System.Threading.Tasks.Task<long> GetOpenAlertCountAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobileSingleAlert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobileSingleAlertResponse")]
        AMS.Broker.Contracts.DTO.AlertMobDto[] GetMobileSingleAlert(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetMobileSingleAlert", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetMobileSingleAlertResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertMobDto[]> GetMobileSingleAlertAsync(string authToken, int alertID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertByDeviceId", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertByDeviceIdResponse")]
        AMS.Broker.Contracts.DTO.Alert[] GetAlertByDeviceId(long DeviceId, string StartDate, string EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAlertByDeviceId", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAlertByDeviceIdResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetAlertByDeviceIdAsync(long DeviceId, string StartDate, string EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertCountResponse")]
        string GetDeviceAlertCount(string authToken, long DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertCountResponse")]
        System.Threading.Tasks.Task<string> GetDeviceAlertCountAsync(string authToken, long DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertByID", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertByIDResponse")]
        AMS.Broker.Contracts.DTO.AlertByDeviceDto[] GetDeviceAlertByID(string authToken, long DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertByID", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetDeviceAlertByIDResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertByDeviceDto[]> GetDeviceAlertByIDAsync(string authToken, long DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetContextAlertData", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetContextAlertDataResponse")]
        AMS.Broker.Contracts.DTO.SPSearch_ResultDto[] GetContextAlertData(string Context, string Component, bool IsDateFilter, string StartDate, string EndDate, string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetContextAlertData", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetContextAlertDataResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SPSearch_ResultDto[]> GetContextAlertDataAsync(string Context, string Component, bool IsDateFilter, string StartDate, string EndDate, string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/AnimateMapPin", ReplyAction="http://tempuri.org/IAlertsGetOperationService/AnimateMapPinResponse")]
        bool AnimateMapPin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/AnimateMapPin", ReplyAction="http://tempuri.org/IAlertsGetOperationService/AnimateMapPinResponse")]
        System.Threading.Tasks.Task<bool> AnimateMapPinAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDevice", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceResponse")]
        AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[] GetAssociatedPTZDevice(string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDevice", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[]> GetAssociatedPTZDeviceAsync(string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceCollection", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceCollectionRes" +
            "ponse")]
        AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[] GetAssociatedPTZDeviceCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceCollection", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedPTZDeviceCollectionRes" +
            "ponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[]> GetAssociatedPTZDeviceCollectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/AllTypeAlertCounts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/AllTypeAlertCountsResponse")]
        string AllTypeAlertCounts(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/AllTypeAlertCounts", ReplyAction="http://tempuri.org/IAlertsGetOperationService/AllTypeAlertCountsResponse")]
        System.Threading.Tasks.Task<string> AllTypeAlertCountsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedDeviceCollection", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedDeviceCollectionRespon" +
            "se")]
        AMS.Broker.Contracts.DTO.ObjectsAssociationDto[] GetAssociatedDeviceCollection(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetAssociatedDeviceCollection", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetAssociatedDeviceCollectionRespon" +
            "se")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ObjectsAssociationDto[]> GetAssociatedDeviceCollectionAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetRecentAndAllTypeAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetRecentAndAllTypeAlertCountRespon" +
            "se")]
        string GetRecentAndAllTypeAlertCount(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertsGetOperationService/GetRecentAndAllTypeAlertCount", ReplyAction="http://tempuri.org/IAlertsGetOperationService/GetRecentAndAllTypeAlertCountRespon" +
            "se")]
        System.Threading.Tasks.Task<string> GetRecentAndAllTypeAlertCountAsync(string authToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlertsGetOperationServiceChannel : AMS.Broker.AutherizationService.AlertsGetOperationServiceRef.IAlertsGetOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlertsGetOperationServiceClient : System.ServiceModel.ClientBase<AMS.Broker.AutherizationService.AlertsGetOperationServiceRef.IAlertsGetOperationService>, AMS.Broker.AutherizationService.AlertsGetOperationServiceRef.IAlertsGetOperationService {
        
        public AlertsGetOperationServiceClient() {
        }
        
        public AlertsGetOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AlertsGetOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertsGetOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertsGetOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetCurrentOpenAlerts(string authToken) {
            return base.Channel.GetCurrentOpenAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetCurrentOpenAlertsAsync(string authToken) {
            return base.Channel.GetCurrentOpenAlertsAsync(authToken);
        }
        
        public string GetMobCurrentOpenAlertsCount(string authToken) {
            return base.Channel.GetMobCurrentOpenAlertsCount(authToken);
        }
        
        public System.Threading.Tasks.Task<string> GetMobCurrentOpenAlertsCountAsync(string authToken) {
            return base.Channel.GetMobCurrentOpenAlertsCountAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.AlertMobDto[] GetMobCurrentOpenAlerts(string authToken) {
            return base.Channel.GetMobCurrentOpenAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertMobDto[]> GetMobCurrentOpenAlertsAsync(string authToken) {
            return base.Channel.GetMobCurrentOpenAlertsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetAcknoledgeAlerts(string authToken) {
            return base.Channel.GetAcknoledgeAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetAcknoledgeAlertsAsync(string authToken) {
            return base.Channel.GetAcknoledgeAlertsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetClosedAlerts(string authToken) {
            return base.Channel.GetClosedAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetClosedAlertsAsync(string authToken) {
            return base.Channel.GetClosedAlertsAsync(authToken);
        }
        
        public bool StartGetCurrentOpenAlerts(string authToken) {
            return base.Channel.StartGetCurrentOpenAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<bool> StartGetCurrentOpenAlertsAsync(string authToken) {
            return base.Channel.StartGetCurrentOpenAlertsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.AlertKpi[] GetAlertsKpi(System.Guid authToken, string startTime, string endTime) {
            return base.Channel.GetAlertsKpi(authToken, startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertKpi[]> GetAlertsKpiAsync(System.Guid authToken, string startTime, string endTime) {
            return base.Channel.GetAlertsKpiAsync(authToken, startTime, endTime);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetNewOpenAlerts(string authToken) {
            return base.Channel.GetNewOpenAlerts(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetNewOpenAlertsAsync(string authToken) {
            return base.Channel.GetNewOpenAlertsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetTop50Alert(string authToken) {
            return base.Channel.GetTop50Alert(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetTop50AlertAsync(string authToken) {
            return base.Channel.GetTop50AlertAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetTop50AlertDummy(string authToken) {
            return base.Channel.GetTop50AlertDummy(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetTop50AlertDummyAsync(string authToken) {
            return base.Channel.GetTop50AlertDummyAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.SeverityDto[] GetAlertsSeverity(string authToken) {
            return base.Channel.GetAlertsSeverity(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SeverityDto[]> GetAlertsSeverityAsync(string authToken) {
            return base.Channel.GetAlertsSeverityAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.CertaintyDto[] GetAlertsCertinity(string authToken) {
            return base.Channel.GetAlertsCertinity(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.CertaintyDto[]> GetAlertsCertinityAsync(string authToken) {
            return base.Channel.GetAlertsCertinityAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.UrgencyDto[] GetAlertsUrgency(string authToken) {
            return base.Channel.GetAlertsUrgency(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.UrgencyDto[]> GetAlertsUrgencyAsync(string authToken) {
            return base.Channel.GetAlertsUrgencyAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetSingleAlert(int alertID) {
            return base.Channel.GetSingleAlert(alertID);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetSingleAlertAsync(int alertID) {
            return base.Channel.GetSingleAlertAsync(alertID);
        }
        
        public long GetOpenAlertCount(string authToken) {
            return base.Channel.GetOpenAlertCount(authToken);
        }
        
        public System.Threading.Tasks.Task<long> GetOpenAlertCountAsync(string authToken) {
            return base.Channel.GetOpenAlertCountAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.AlertMobDto[] GetMobileSingleAlert(string authToken, int alertID) {
            return base.Channel.GetMobileSingleAlert(authToken, alertID);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertMobDto[]> GetMobileSingleAlertAsync(string authToken, int alertID) {
            return base.Channel.GetMobileSingleAlertAsync(authToken, alertID);
        }
        
        public AMS.Broker.Contracts.DTO.Alert[] GetAlertByDeviceId(long DeviceId, string StartDate, string EndDate) {
            return base.Channel.GetAlertByDeviceId(DeviceId, StartDate, EndDate);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Alert[]> GetAlertByDeviceIdAsync(long DeviceId, string StartDate, string EndDate) {
            return base.Channel.GetAlertByDeviceIdAsync(DeviceId, StartDate, EndDate);
        }
        
        public string GetDeviceAlertCount(string authToken, long DeviceId) {
            return base.Channel.GetDeviceAlertCount(authToken, DeviceId);
        }
        
        public System.Threading.Tasks.Task<string> GetDeviceAlertCountAsync(string authToken, long DeviceId) {
            return base.Channel.GetDeviceAlertCountAsync(authToken, DeviceId);
        }
        
        public AMS.Broker.Contracts.DTO.AlertByDeviceDto[] GetDeviceAlertByID(string authToken, long DeviceId) {
            return base.Channel.GetDeviceAlertByID(authToken, DeviceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AlertByDeviceDto[]> GetDeviceAlertByIDAsync(string authToken, long DeviceId) {
            return base.Channel.GetDeviceAlertByIDAsync(authToken, DeviceId);
        }
        
        public AMS.Broker.Contracts.DTO.SPSearch_ResultDto[] GetContextAlertData(string Context, string Component, bool IsDateFilter, string StartDate, string EndDate, string AuthToken) {
            return base.Channel.GetContextAlertData(Context, Component, IsDateFilter, StartDate, EndDate, AuthToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.SPSearch_ResultDto[]> GetContextAlertDataAsync(string Context, string Component, bool IsDateFilter, string StartDate, string EndDate, string AuthToken) {
            return base.Channel.GetContextAlertDataAsync(Context, Component, IsDateFilter, StartDate, EndDate, AuthToken);
        }
        
        public bool AnimateMapPin() {
            return base.Channel.AnimateMapPin();
        }
        
        public System.Threading.Tasks.Task<bool> AnimateMapPinAsync() {
            return base.Channel.AnimateMapPinAsync();
        }
        
        public AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[] GetAssociatedPTZDevice(string DeviceId) {
            return base.Channel.GetAssociatedPTZDevice(DeviceId);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[]> GetAssociatedPTZDeviceAsync(string DeviceId) {
            return base.Channel.GetAssociatedPTZDeviceAsync(DeviceId);
        }
        
        public AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[] GetAssociatedPTZDeviceCollection() {
            return base.Channel.GetAssociatedPTZDeviceCollection();
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.AssociatedPtzDeviceDto[]> GetAssociatedPTZDeviceCollectionAsync() {
            return base.Channel.GetAssociatedPTZDeviceCollectionAsync();
        }
        
        public string AllTypeAlertCounts(string authToken) {
            return base.Channel.AllTypeAlertCounts(authToken);
        }
        
        public System.Threading.Tasks.Task<string> AllTypeAlertCountsAsync(string authToken) {
            return base.Channel.AllTypeAlertCountsAsync(authToken);
        }
        
        public AMS.Broker.Contracts.DTO.ObjectsAssociationDto[] GetAssociatedDeviceCollection(string authToken) {
            return base.Channel.GetAssociatedDeviceCollection(authToken);
        }
        
        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.ObjectsAssociationDto[]> GetAssociatedDeviceCollectionAsync(string authToken) {
            return base.Channel.GetAssociatedDeviceCollectionAsync(authToken);
        }
        
        public string GetRecentAndAllTypeAlertCount(string authToken) {
            return base.Channel.GetRecentAndAllTypeAlertCount(authToken);
        }
        
        public System.Threading.Tasks.Task<string> GetRecentAndAllTypeAlertCountAsync(string authToken) {
            return base.Channel.GetRecentAndAllTypeAlertCountAsync(authToken);
        }
    }
}
