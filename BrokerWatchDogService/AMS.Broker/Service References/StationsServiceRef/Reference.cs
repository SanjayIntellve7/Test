//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMS.Broker.StationsServiceRef {
    using System.Runtime.Serialization;
    using System;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Station", Namespace = "http://schemas.datacontract.org/2004/07/AMS.Broker.Contracts.DTO")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivationDateField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AltitudeField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifierField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationDescriptionField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIdField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivationDate
        {
            get
            {
                return this.ActivationDateField;
            }
            set
            {
                if ((this.ActivationDateField.Equals(value) != true))
                {
                    this.ActivationDateField = value;
                    this.RaisePropertyChanged("ActivationDate");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Altitude
        {
            get
            {
                return this.AltitudeField;
            }
            set
            {
                if ((this.AltitudeField.Equals(value) != true))
                {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true))
                {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifier
        {
            get
            {
                return this.IdentifierField;
            }
            set
            {
                if ((object.ReferenceEquals(this.IdentifierField, value) != true))
                {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive
        {
            get
            {
                return this.IsActiveField;
            }
            set
            {
                if ((this.IsActiveField.Equals(value) != true))
                {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Lat
        {
            get
            {
                return this.LatField;
            }
            set
            {
                if ((this.LatField.Equals(value) != true))
                {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationDescription
        {
            get
            {
                return this.LocationDescriptionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LocationDescriptionField, value) != true))
                {
                    this.LocationDescriptionField = value;
                    this.RaisePropertyChanged("LocationDescription");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Long
        {
            get
            {
                return this.LongField;
            }
            set
            {
                if ((this.LongField.Equals(value) != true))
                {
                    this.LongField = value;
                    this.RaisePropertyChanged("Long");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MetadataField, value) != true))
                {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationId
        {
            get
            {
                return this.StationIdField;
            }
            set
            {
                if ((this.StationIdField.Equals(value) != true))
                {
                    this.StationIdField = value;
                    this.RaisePropertyChanged("StationId");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TypeField, value) != true))
                {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "StationsServiceRef.IStationsService")]
    public interface IStationsService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/Test", ReplyAction = "http://tempuri.org/IStationsService/TestResponse")]
        bool Test();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/Test", ReplyAction = "http://tempuri.org/IStationsService/TestResponse")]
        System.Threading.Tasks.Task<bool> TestAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/RegisterStation", ReplyAction = "http://tempuri.org/IStationsService/RegisterStationResponse")]
        bool RegisterStation(string authToken, string identifier, string type, string description, string metadata, string longitued, string latitude);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/RegisterStation", ReplyAction = "http://tempuri.org/IStationsService/RegisterStationResponse")]
        System.Threading.Tasks.Task<bool> RegisterStationAsync(string authToken, string identifier, string type, string description, string metadata, string longitued, string latitude);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/UpdateRegistionInfoStation", ReplyAction = "http://tempuri.org/IStationsService/UpdateRegistionInfoStationResponse")]
        AMS.Broker.Contracts.DTO.Station UpdateRegistionInfoStation(string authToken, string identifier, string description, string metadata, string longitued, string latitude);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/UpdateRegistionInfoStation", ReplyAction = "http://tempuri.org/IStationsService/UpdateRegistionInfoStationResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station> UpdateRegistionInfoStationAsync(string authToken, string identifier, string description, string metadata, string longitued, string latitude);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/ActivateStation", ReplyAction = "http://tempuri.org/IStationsService/ActivateStationResponse")]
        AMS.Broker.Contracts.DTO.Station ActivateStation(string authToken, string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/ActivateStation", ReplyAction = "http://tempuri.org/IStationsService/ActivateStationResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station> ActivateStationAsync(string authToken, string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/DeactivateStation", ReplyAction = "http://tempuri.org/IStationsService/DeactivateStationResponse")]
        void DeactivateStation(string authToken, string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/DeactivateStation", ReplyAction = "http://tempuri.org/IStationsService/DeactivateStationResponse")]
        System.Threading.Tasks.Task DeactivateStationAsync(string authToken, string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/DeactivateStationByIdentifier", ReplyAction = "http://tempuri.org/IStationsService/DeactivateStationByIdentifierResponse")]
        void DeactivateStationByIdentifier(string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/DeactivateStationByIdentifier", ReplyAction = "http://tempuri.org/IStationsService/DeactivateStationByIdentifierResponse")]
        System.Threading.Tasks.Task DeactivateStationByIdentifierAsync(string identifier);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SentAlertToStation", ReplyAction = "http://tempuri.org/IStationsService/SentAlertToStationResponse")]
        bool SentAlertToStation(string userSID, AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SentAlertToStation", ReplyAction = "http://tempuri.org/IStationsService/SentAlertToStationResponse")]
        System.Threading.Tasks.Task<bool> SentAlertToStationAsync(string userSID, AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SentMessage", ReplyAction = "http://tempuri.org/IStationsService/SentMessageResponse")]
        void SentMessage(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SentMessage", ReplyAction = "http://tempuri.org/IStationsService/SentMessageResponse")]
        System.Threading.Tasks.Task SentMessageAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SetMosaic", ReplyAction = "http://tempuri.org/IStationsService/SetMosaicResponse")]
        void SetMosaic(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SetMosaic", ReplyAction = "http://tempuri.org/IStationsService/SetMosaicResponse")]
        System.Threading.Tasks.Task SetMosaicAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SetStartStopSequence", ReplyAction = "http://tempuri.org/IStationsService/SetStartStopSequenceResponse")]
        void SetStartStopSequence(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SetStartStopSequence", ReplyAction = "http://tempuri.org/IStationsService/SetStartStopSequenceResponse")]
        System.Threading.Tasks.Task SetStartStopSequenceAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SendMobileNotification", ReplyAction = "http://tempuri.org/IStationsService/SendMobileNotificationResponse")]
        void SendMobileNotification(AMS.Broker.Contracts.DTO.MobileNotificationData mobData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/SendMobileNotification", ReplyAction = "http://tempuri.org/IStationsService/SendMobileNotificationResponse")]
        System.Threading.Tasks.Task SendMobileNotificationAsync(AMS.Broker.Contracts.DTO.MobileNotificationData mobData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/GetStationsCollection", ReplyAction = "http://tempuri.org/IStationsService/GetStationsCollectionResponse")]
        AMS.Broker.Contracts.DTO.Station[] GetStationsCollection(string authToken, bool includeInactive);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/GetStationsCollection", ReplyAction = "http://tempuri.org/IStationsService/GetStationsCollectionResponse")]
        System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station[]> GetStationsCollectionAsync(string authToken, bool includeInactive);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlerts", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsResponse")]
        void InformAboutRaisedAlerts(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlerts", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsResponse")]
        System.Threading.Tasks.Task InformAboutRaisedAlertsAsync(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsNew", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsNewResponse")]
        void InformAboutRaisedAlertsNew(AMS.Broker.Contracts.DTO.Alert alertDto, string OldOwner);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsNew", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsNewResponse")]
        System.Threading.Tasks.Task InformAboutRaisedAlertsNewAsync(AMS.Broker.Contracts.DTO.Alert alertDto, string OldOwner);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutCollabrateAlerts", ReplyAction = "http://tempuri.org/IStationsService/InformAboutCollabrateAlertsResponse")]
        void InformAboutCollabrateAlerts(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutCollabrateAlerts", ReplyAction = "http://tempuri.org/IStationsService/InformAboutCollabrateAlertsResponse")]
        System.Threading.Tasks.Task InformAboutCollabrateAlertsAsync(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsAssigned", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsAssignedResponse")]
        void InformAboutRaisedAlertsAssigned(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsAssigned", ReplyAction = "http://tempuri.org/IStationsService/InformAboutRaisedAlertsAssignedResponse")]
        System.Threading.Tasks.Task InformAboutRaisedAlertsAssignedAsync(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCapProfileUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformCapProfileUpdateResponse")]
        void InformCapProfileUpdate(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCapProfileUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformCapProfileUpdateResponse")]
        System.Threading.Tasks.Task InformCapProfileUpdateAsync(AMS.Broker.Contracts.DTO.Alert alertDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutUserLoggedIn", ReplyAction = "http://tempuri.org/IStationsService/InformAboutUserLoggedInResponse")]
        void InformAboutUserLoggedIn(AMS.Broker.Contracts.DTO.User user);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutUserLoggedIn", ReplyAction = "http://tempuri.org/IStationsService/InformAboutUserLoggedInResponse")]
        System.Threading.Tasks.Task InformAboutUserLoggedInAsync(AMS.Broker.Contracts.DTO.User user);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutUserLoggedOut", ReplyAction = "http://tempuri.org/IStationsService/InformAboutUserLoggedOutResponse")]
        void InformAboutUserLoggedOut(AMS.Broker.Contracts.DTO.User user);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutUserLoggedOut", ReplyAction = "http://tempuri.org/IStationsService/InformAboutUserLoggedOutResponse")]
        System.Threading.Tasks.Task InformAboutUserLoggedOutAsync(AMS.Broker.Contracts.DTO.User user);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAlertUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAlertUpdateResponse")]
        void InformAboutAlertUpdate(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAlertUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAlertUpdateResponse")]
        System.Threading.Tasks.Task InformAboutAlertUpdateAsync(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAlertsUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAlertsUpdateResponse")]
        void InformAboutAlertsUpdate(AMS.Broker.Contracts.DTO.Alert[] alerts);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAlertsUpdate", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAlertsUpdateResponse")]
        System.Threading.Tasks.Task InformAboutAlertsUpdateAsync(AMS.Broker.Contracts.DTO.Alert[] alerts);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAcknowledgedAlert", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAcknowledgedAlertResponse")]
        void InformAboutAcknowledgedAlert(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutAcknowledgedAlert", ReplyAction = "http://tempuri.org/IStationsService/InformAboutAcknowledgedAlertResponse")]
        System.Threading.Tasks.Task InformAboutAcknowledgedAlertAsync(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutCanceledAlert", ReplyAction = "http://tempuri.org/IStationsService/InformAboutCanceledAlertResponse")]
        void InformAboutCanceledAlert(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutCanceledAlert", ReplyAction = "http://tempuri.org/IStationsService/InformAboutCanceledAlertResponse")]
        System.Threading.Tasks.Task InformAboutCanceledAlertAsync(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReport", ReplyAction = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportResponse")]
        bool NotifyNewOwnerOfIncidentReport(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReport", ReplyAction = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportResponse")]
        System.Threading.Tasks.Task<bool> NotifyNewOwnerOfIncidentReportAsync(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformUpdatedGroups", ReplyAction = "http://tempuri.org/IStationsService/InformUpdatedGroupsResponse")]
        void InformUpdatedGroups();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformUpdatedGroups", ReplyAction = "http://tempuri.org/IStationsService/InformUpdatedGroupsResponse")]
        System.Threading.Tasks.Task InformUpdatedGroupsAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportCollabrotion", ReplyAction = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportCollabrotionRes" +
            "ponse")]
        bool NotifyNewOwnerOfIncidentReportCollabrotion(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportCollabrotion", ReplyAction = "http://tempuri.org/IStationsService/NotifyNewOwnerOfIncidentReportCollabrotionRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> NotifyNewOwnerOfIncidentReportCollabrotionAsync(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/CheckStationsStatus", ReplyAction = "http://tempuri.org/IStationsService/CheckStationsStatusResponse")]
        void CheckStationsStatus();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/CheckStationsStatus", ReplyAction = "http://tempuri.org/IStationsService/CheckStationsStatusResponse")]
        System.Threading.Tasks.Task CheckStationsStatusAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCamBookMarkadd", ReplyAction = "http://tempuri.org/IStationsService/InformCamBookMarkaddResponse")]
        void InformCamBookMarkadd(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCamBookMarkadd", ReplyAction = "http://tempuri.org/IStationsService/InformCamBookMarkaddResponse")]
        System.Threading.Tasks.Task InformCamBookMarkaddAsync(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCurrentClimateAlert", ReplyAction = "http://tempuri.org/IStationsService/InformCurrentClimateAlertResponse")]
        void InformCurrentClimateAlert(AMS.Broker.Contracts.DTO.tblweatherchcurrentDTO _CurrentData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCurrentClimateAlert", ReplyAction = "http://tempuri.org/IStationsService/InformCurrentClimateAlertResponse")]
        System.Threading.Tasks.Task InformCurrentClimateAlertAsync(AMS.Broker.Contracts.DTO.tblweatherchcurrentDTO _CurrentData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformForecastClimateAlert", ReplyAction = "http://tempuri.org/IStationsService/InformForecastClimateAlertResponse")]
        void InformForecastClimateAlert(AMS.Broker.Contracts.DTO.tblWeatherhourlyforecastDTO[] _forecastData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformForecastClimateAlert", ReplyAction = "http://tempuri.org/IStationsService/InformForecastClimateAlertResponse")]
        System.Threading.Tasks.Task InformForecastClimateAlertAsync(AMS.Broker.Contracts.DTO.tblWeatherhourlyforecastDTO[] _forecastData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAccountSaved", ReplyAction = "http://tempuri.org/IStationsService/InformAccountSavedResponse")]
        void InformAccountSaved(AMS.Broker.Contracts.DTO.AccountLightDto accountDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAccountSaved", ReplyAction = "http://tempuri.org/IStationsService/InformAccountSavedResponse")]
        System.Threading.Tasks.Task InformAccountSavedAsync(AMS.Broker.Contracts.DTO.AccountLightDto accountDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteChanged", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteChangedResponse")]
        void InformAboutSiteChanged(AMS.Broker.Contracts.DTO.SiteDto site);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteChanged", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteChangedResponse")]
        System.Threading.Tasks.Task InformAboutSiteChangedAsync(AMS.Broker.Contracts.DTO.SiteDto site);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteAdded", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteAddedResponse")]
        void InformAboutSiteAdded(AMS.Broker.Contracts.DTO.SiteDto site);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteAdded", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteAddedResponse")]
        System.Threading.Tasks.Task InformAboutSiteAddedAsync(AMS.Broker.Contracts.DTO.SiteDto site);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteDeleted", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteDeletedResponse")]
        void InformAboutSiteDeleted(int siteId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutSiteDeleted", ReplyAction = "http://tempuri.org/IStationsService/InformAboutSiteDeletedResponse")]
        System.Threading.Tasks.Task InformAboutSiteDeletedAsync(int siteId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceAdded", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceAddedResponse")]
        void InformDeviceAdded(AMS.Broker.Contracts.DTO.DeviceDto deviceDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceAdded", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceAddedResponse")]
        System.Threading.Tasks.Task InformDeviceAddedAsync(AMS.Broker.Contracts.DTO.DeviceDto deviceDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceSaved", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceSavedResponse")]
        void InformDeviceSaved(AMS.Broker.Contracts.DTO.DeviceDto deviceDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceSaved", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceSavedResponse")]
        System.Threading.Tasks.Task InformDeviceSavedAsync(AMS.Broker.Contracts.DTO.DeviceDto deviceDto);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceRemoved", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceRemovedResponse")]
        void InformDeviceRemoved(long deviceId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformDeviceRemoved", ReplyAction = "http://tempuri.org/IStationsService/InformDeviceRemovedResponse")]
        System.Threading.Tasks.Task InformDeviceRemovedAsync(long deviceId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformVideoAnalyticsStarted", ReplyAction = "http://tempuri.org/IStationsService/InformVideoAnalyticsStartedResponse")]
        void InformVideoAnalyticsStarted(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformVideoAnalyticsStarted", ReplyAction = "http://tempuri.org/IStationsService/InformVideoAnalyticsStartedResponse")]
        System.Threading.Tasks.Task InformVideoAnalyticsStartedAsync(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformVideoAnalyticsStopped", ReplyAction = "http://tempuri.org/IStationsService/InformVideoAnalyticsStoppedResponse")]
        void InformVideoAnalyticsStopped(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformVideoAnalyticsStopped", ReplyAction = "http://tempuri.org/IStationsService/InformVideoAnalyticsStoppedResponse")]
        System.Threading.Tasks.Task InformVideoAnalyticsStoppedAsync(string cameraGuid);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/PongBroker", ReplyAction = "http://tempuri.org/IStationsService/PongBrokerResponse")]
        void PongBroker();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/PongBroker", ReplyAction = "http://tempuri.org/IStationsService/PongBrokerResponse")]
        System.Threading.Tasks.Task PongBrokerAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformStationsAboutEvent", ReplyAction = "http://tempuri.org/IStationsService/InformStationsAboutEventResponse")]
        void InformStationsAboutEvent(AMS.Broker.Contracts.DTO.Event realTimeEvent);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformStationsAboutEvent", ReplyAction = "http://tempuri.org/IStationsService/InformStationsAboutEventResponse")]
        System.Threading.Tasks.Task InformStationsAboutEventAsync(AMS.Broker.Contracts.DTO.Event realTimeEvent);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCloseAllAlert", ReplyAction = "http://tempuri.org/IStationsService/InformCloseAllAlertResponse")]
        bool InformCloseAllAlert(string _deviceId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformCloseAllAlert", ReplyAction = "http://tempuri.org/IStationsService/InformCloseAllAlertResponse")]
        System.Threading.Tasks.Task<bool> InformCloseAllAlertAsync(string _deviceId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutPAAnnounce", ReplyAction = "http://tempuri.org/IStationsService/InformAboutPAAnnounceResponse")]
        void InformAboutPAAnnounce(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutPAAnnounce", ReplyAction = "http://tempuri.org/IStationsService/InformAboutPAAnnounceResponse")]
        System.Threading.Tasks.Task InformAboutPAAnnounceAsync(AMS.Broker.Contracts.DTO.Alert alert);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutOpenNearByCameras", ReplyAction = "http://tempuri.org/IStationsService/InformAboutOpenNearByCamerasResponse")]
        void InformAboutOpenNearByCameras(string siteID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IStationsService/InformAboutOpenNearByCameras", ReplyAction = "http://tempuri.org/IStationsService/InformAboutOpenNearByCamerasResponse")]
        System.Threading.Tasks.Task InformAboutOpenNearByCamerasAsync(string siteID);

    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStationsServiceChannel : AMS.Broker.StationsServiceRef.IStationsService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StationsServiceClient : System.ServiceModel.ClientBase<AMS.Broker.StationsServiceRef.IStationsService>, AMS.Broker.StationsServiceRef.IStationsService
    {

        public StationsServiceClient()
        {
        }

        public StationsServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public StationsServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public StationsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public StationsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public bool Test()
        {
            return base.Channel.Test();
        }

        public System.Threading.Tasks.Task<bool> TestAsync()
        {
            return base.Channel.TestAsync();
        }

        public bool RegisterStation(string authToken, string identifier, string type, string description, string metadata, string longitued, string latitude)
        {
            return base.Channel.RegisterStation(authToken, identifier, type, description, metadata, longitued, latitude);
        }

        public System.Threading.Tasks.Task<bool> RegisterStationAsync(string authToken, string identifier, string type, string description, string metadata, string longitued, string latitude)
        {
            return base.Channel.RegisterStationAsync(authToken, identifier, type, description, metadata, longitued, latitude);
        }

        public AMS.Broker.Contracts.DTO.Station UpdateRegistionInfoStation(string authToken, string identifier, string description, string metadata, string longitued, string latitude)
        {
            return base.Channel.UpdateRegistionInfoStation(authToken, identifier, description, metadata, longitued, latitude);
        }

        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station> UpdateRegistionInfoStationAsync(string authToken, string identifier, string description, string metadata, string longitued, string latitude)
        {
            return base.Channel.UpdateRegistionInfoStationAsync(authToken, identifier, description, metadata, longitued, latitude);
        }

        public AMS.Broker.Contracts.DTO.Station ActivateStation(string authToken, string identifier)
        {
            return base.Channel.ActivateStation(authToken, identifier);
        }

        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station> ActivateStationAsync(string authToken, string identifier)
        {
            return base.Channel.ActivateStationAsync(authToken, identifier);
        }

        public void DeactivateStation(string authToken, string identifier)
        {
            base.Channel.DeactivateStation(authToken, identifier);
        }

        public System.Threading.Tasks.Task DeactivateStationAsync(string authToken, string identifier)
        {
            return base.Channel.DeactivateStationAsync(authToken, identifier);
        }

        public void DeactivateStationByIdentifier(string identifier)
        {
            base.Channel.DeactivateStationByIdentifier(identifier);
        }

        public System.Threading.Tasks.Task DeactivateStationByIdentifierAsync(string identifier)
        {
            return base.Channel.DeactivateStationByIdentifierAsync(identifier);
        }

        public bool SentAlertToStation(string userSID, AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.SentAlertToStation(userSID, alert);
        }

        public System.Threading.Tasks.Task<bool> SentAlertToStationAsync(string userSID, AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.SentAlertToStationAsync(userSID, alert);
        }

        public void SentMessage(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            base.Channel.SentMessage(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public System.Threading.Tasks.Task SentMessageAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            return base.Channel.SentMessageAsync(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public void SetMosaic(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            base.Channel.SetMosaic(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public System.Threading.Tasks.Task SetMosaicAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            return base.Channel.SetMosaicAsync(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public void SetStartStopSequence(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            base.Channel.SetStartStopSequence(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public System.Threading.Tasks.Task SetStartStopSequenceAsync(string authToken, int stationId, int monitorId, string type, string content, int fromStationId)
        {
            return base.Channel.SetStartStopSequenceAsync(authToken, stationId, monitorId, type, content, fromStationId);
        }

        public void SendMobileNotification(AMS.Broker.Contracts.DTO.MobileNotificationData mobData)
        {
            base.Channel.SendMobileNotification(mobData);
        }

        public System.Threading.Tasks.Task SendMobileNotificationAsync(AMS.Broker.Contracts.DTO.MobileNotificationData mobData)
        {
            return base.Channel.SendMobileNotificationAsync(mobData);
        }

        public AMS.Broker.Contracts.DTO.Station[] GetStationsCollection(string authToken, bool includeInactive)
        {
            return base.Channel.GetStationsCollection(authToken, includeInactive);
        }

        public System.Threading.Tasks.Task<AMS.Broker.Contracts.DTO.Station[]> GetStationsCollectionAsync(string authToken, bool includeInactive)
        {
            return base.Channel.GetStationsCollectionAsync(authToken, includeInactive);
        }

        public void InformAboutRaisedAlerts(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            base.Channel.InformAboutRaisedAlerts(alertDto);
        }

        public System.Threading.Tasks.Task InformAboutRaisedAlertsAsync(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            return base.Channel.InformAboutRaisedAlertsAsync(alertDto);
        }

        public void InformAboutRaisedAlertsNew(AMS.Broker.Contracts.DTO.Alert alertDto, string OldOwner)
        {
            base.Channel.InformAboutRaisedAlertsNew(alertDto, OldOwner);
        }

        public System.Threading.Tasks.Task InformAboutRaisedAlertsNewAsync(AMS.Broker.Contracts.DTO.Alert alertDto, string OldOwner)
        {
            return base.Channel.InformAboutRaisedAlertsNewAsync(alertDto, OldOwner);
        }

        public void InformAboutCollabrateAlerts(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            base.Channel.InformAboutCollabrateAlerts(alertDto);
        }

        public System.Threading.Tasks.Task InformAboutCollabrateAlertsAsync(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            return base.Channel.InformAboutCollabrateAlertsAsync(alertDto);
        }

        public void InformAboutRaisedAlertsAssigned(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            base.Channel.InformAboutRaisedAlertsAssigned(alertDto);
        }

        public System.Threading.Tasks.Task InformAboutRaisedAlertsAssignedAsync(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            return base.Channel.InformAboutRaisedAlertsAssignedAsync(alertDto);
        }

        public void InformCapProfileUpdate(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            base.Channel.InformCapProfileUpdate(alertDto);
        }

        public System.Threading.Tasks.Task InformCapProfileUpdateAsync(AMS.Broker.Contracts.DTO.Alert alertDto)
        {
            return base.Channel.InformCapProfileUpdateAsync(alertDto);
        }

        public void InformAboutUserLoggedIn(AMS.Broker.Contracts.DTO.User user)
        {
            base.Channel.InformAboutUserLoggedIn(user);
        }

        public System.Threading.Tasks.Task InformAboutUserLoggedInAsync(AMS.Broker.Contracts.DTO.User user)
        {
            return base.Channel.InformAboutUserLoggedInAsync(user);
        }

        public void InformAboutUserLoggedOut(AMS.Broker.Contracts.DTO.User user)
        {
            base.Channel.InformAboutUserLoggedOut(user);
        }

        public System.Threading.Tasks.Task InformAboutUserLoggedOutAsync(AMS.Broker.Contracts.DTO.User user)
        {
            return base.Channel.InformAboutUserLoggedOutAsync(user);
        }

        public void InformAboutAlertUpdate(AMS.Broker.Contracts.DTO.Alert alert)
        {
            base.Channel.InformAboutAlertUpdate(alert);
        }

        public System.Threading.Tasks.Task InformAboutAlertUpdateAsync(AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.InformAboutAlertUpdateAsync(alert);
        }

        public void InformAboutAlertsUpdate(AMS.Broker.Contracts.DTO.Alert[] alerts)
        {
            base.Channel.InformAboutAlertsUpdate(alerts);
        }

        public System.Threading.Tasks.Task InformAboutAlertsUpdateAsync(AMS.Broker.Contracts.DTO.Alert[] alerts)
        {
            return base.Channel.InformAboutAlertsUpdateAsync(alerts);
        }

        public void InformAboutAcknowledgedAlert(AMS.Broker.Contracts.DTO.Alert alert)
        {
            base.Channel.InformAboutAcknowledgedAlert(alert);
        }

        public System.Threading.Tasks.Task InformAboutAcknowledgedAlertAsync(AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.InformAboutAcknowledgedAlertAsync(alert);
        }

        public void InformAboutCanceledAlert(AMS.Broker.Contracts.DTO.Alert alert)
        {
            base.Channel.InformAboutCanceledAlert(alert);
        }

        public System.Threading.Tasks.Task InformAboutCanceledAlertAsync(AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.InformAboutCanceledAlertAsync(alert);
        }

        public bool NotifyNewOwnerOfIncidentReport(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport)
        {
            return base.Channel.NotifyNewOwnerOfIncidentReport(userSID, incidentReport);
        }

        public System.Threading.Tasks.Task<bool> NotifyNewOwnerOfIncidentReportAsync(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport)
        {
            return base.Channel.NotifyNewOwnerOfIncidentReportAsync(userSID, incidentReport);
        }

        public void InformUpdatedGroups()
        {
            base.Channel.InformUpdatedGroups();
        }

        public System.Threading.Tasks.Task InformUpdatedGroupsAsync()
        {
            return base.Channel.InformUpdatedGroupsAsync();
        }

        public bool NotifyNewOwnerOfIncidentReportCollabrotion(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport)
        {
            return base.Channel.NotifyNewOwnerOfIncidentReportCollabrotion(userSID, incidentReport);
        }

        public System.Threading.Tasks.Task<bool> NotifyNewOwnerOfIncidentReportCollabrotionAsync(string userSID, AMS.Broker.Contracts.DTO.IncidentReportWrapper incidentReport)
        {
            return base.Channel.NotifyNewOwnerOfIncidentReportCollabrotionAsync(userSID, incidentReport);
        }

        public void CheckStationsStatus()
        {
            base.Channel.CheckStationsStatus();
        }

        public System.Threading.Tasks.Task CheckStationsStatusAsync()
        {
            return base.Channel.CheckStationsStatusAsync();
        }

        public void InformCamBookMarkadd(string cameraGuid)
        {
            base.Channel.InformCamBookMarkadd(cameraGuid);
        }

        public System.Threading.Tasks.Task InformCamBookMarkaddAsync(string cameraGuid)
        {
            return base.Channel.InformCamBookMarkaddAsync(cameraGuid);
        }

        public void InformCurrentClimateAlert(AMS.Broker.Contracts.DTO.tblweatherchcurrentDTO _CurrentData)
        {
            base.Channel.InformCurrentClimateAlert(_CurrentData);
        }

        public System.Threading.Tasks.Task InformCurrentClimateAlertAsync(AMS.Broker.Contracts.DTO.tblweatherchcurrentDTO _CurrentData)
        {
            return base.Channel.InformCurrentClimateAlertAsync(_CurrentData);
        }

        public void InformForecastClimateAlert(AMS.Broker.Contracts.DTO.tblWeatherhourlyforecastDTO[] _forecastData)
        {
            base.Channel.InformForecastClimateAlert(_forecastData);
        }

        public System.Threading.Tasks.Task InformForecastClimateAlertAsync(AMS.Broker.Contracts.DTO.tblWeatherhourlyforecastDTO[] _forecastData)
        {
            return base.Channel.InformForecastClimateAlertAsync(_forecastData);
        }

        public void InformAccountSaved(AMS.Broker.Contracts.DTO.AccountLightDto accountDto)
        {
            base.Channel.InformAccountSaved(accountDto);
        }

        public System.Threading.Tasks.Task InformAccountSavedAsync(AMS.Broker.Contracts.DTO.AccountLightDto accountDto)
        {
            return base.Channel.InformAccountSavedAsync(accountDto);
        }

        public void InformAboutSiteChanged(AMS.Broker.Contracts.DTO.SiteDto site)
        {
            base.Channel.InformAboutSiteChanged(site);
        }

        public System.Threading.Tasks.Task InformAboutSiteChangedAsync(AMS.Broker.Contracts.DTO.SiteDto site)
        {
            return base.Channel.InformAboutSiteChangedAsync(site);
        }

        public void InformAboutSiteAdded(AMS.Broker.Contracts.DTO.SiteDto site)
        {
            base.Channel.InformAboutSiteAdded(site);
        }

        public System.Threading.Tasks.Task InformAboutSiteAddedAsync(AMS.Broker.Contracts.DTO.SiteDto site)
        {
            return base.Channel.InformAboutSiteAddedAsync(site);
        }

        public void InformAboutSiteDeleted(int siteId)
        {
            base.Channel.InformAboutSiteDeleted(siteId);
        }

        public System.Threading.Tasks.Task InformAboutSiteDeletedAsync(int siteId)
        {
            return base.Channel.InformAboutSiteDeletedAsync(siteId);
        }

        public void InformDeviceAdded(AMS.Broker.Contracts.DTO.DeviceDto deviceDto)
        {
            base.Channel.InformDeviceAdded(deviceDto);
        }

        public System.Threading.Tasks.Task InformDeviceAddedAsync(AMS.Broker.Contracts.DTO.DeviceDto deviceDto)
        {
            return base.Channel.InformDeviceAddedAsync(deviceDto);
        }

        public void InformDeviceSaved(AMS.Broker.Contracts.DTO.DeviceDto deviceDto)
        {
            base.Channel.InformDeviceSaved(deviceDto);
        }

        public System.Threading.Tasks.Task InformDeviceSavedAsync(AMS.Broker.Contracts.DTO.DeviceDto deviceDto)
        {
            return base.Channel.InformDeviceSavedAsync(deviceDto);
        }

        public void InformDeviceRemoved(long deviceId)
        {
            base.Channel.InformDeviceRemoved(deviceId);
        }

        public System.Threading.Tasks.Task InformDeviceRemovedAsync(long deviceId)
        {
            return base.Channel.InformDeviceRemovedAsync(deviceId);
        }

        public void InformVideoAnalyticsStarted(string cameraGuid)
        {
            base.Channel.InformVideoAnalyticsStarted(cameraGuid);
        }

        public System.Threading.Tasks.Task InformVideoAnalyticsStartedAsync(string cameraGuid)
        {
            return base.Channel.InformVideoAnalyticsStartedAsync(cameraGuid);
        }

        public void InformVideoAnalyticsStopped(string cameraGuid)
        {
            base.Channel.InformVideoAnalyticsStopped(cameraGuid);
        }

        public System.Threading.Tasks.Task InformVideoAnalyticsStoppedAsync(string cameraGuid)
        {
            return base.Channel.InformVideoAnalyticsStoppedAsync(cameraGuid);
        }

        public void PongBroker()
        {
            base.Channel.PongBroker();
        }

        public System.Threading.Tasks.Task PongBrokerAsync()
        {
            return base.Channel.PongBrokerAsync();
        }

        public void InformStationsAboutEvent(AMS.Broker.Contracts.DTO.Event realTimeEvent)
        {
            base.Channel.InformStationsAboutEvent(realTimeEvent);
        }

        public System.Threading.Tasks.Task InformStationsAboutEventAsync(AMS.Broker.Contracts.DTO.Event realTimeEvent)
        {
            return base.Channel.InformStationsAboutEventAsync(realTimeEvent);
        }

        public bool InformCloseAllAlert(string _deviceId)
        {
            return base.Channel.InformCloseAllAlert(_deviceId);
        }

        public System.Threading.Tasks.Task<bool> InformCloseAllAlertAsync(string _deviceId)
        {
            return base.Channel.InformCloseAllAlertAsync(_deviceId);
        }

        public void InformAboutPAAnnounce(AMS.Broker.Contracts.DTO.Alert alert)
        {
            base.Channel.InformAboutPAAnnounce(alert);
        }

        public System.Threading.Tasks.Task InformAboutPAAnnounceAsync(AMS.Broker.Contracts.DTO.Alert alert)
        {
            return base.Channel.InformAboutPAAnnounceAsync(alert);
        }

        public void InformAboutOpenNearByCameras(string siteID)
        {
            base.Channel.InformAboutOpenNearByCameras(siteID);
        }

        public System.Threading.Tasks.Task InformAboutOpenNearByCamerasAsync(string siteID)
        {
            return base.Channel.InformAboutOpenNearByCamerasAsync(siteID);
        }
    }

}
